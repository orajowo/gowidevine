// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: license.proto

package widevinepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LicenseType int32

const (
	LicenseType_STREAMING LicenseType = 1
	LicenseType_OFFLINE   LicenseType = 2
	// License type decision is left to provider.
	LicenseType_AUTOMATIC LicenseType = 3
)

// Enum value maps for LicenseType.
var (
	LicenseType_name = map[int32]string{
		1: "STREAMING",
		2: "OFFLINE",
		3: "AUTOMATIC",
	}
	LicenseType_value = map[string]int32{
		"STREAMING": 1,
		"OFFLINE":   2,
		"AUTOMATIC": 3,
	}
)

func (x LicenseType) Enum() *LicenseType {
	p := new(LicenseType)
	*p = x
	return p
}

func (x LicenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[0].Descriptor()
}

func (LicenseType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[0]
}

func (x LicenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LicenseType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LicenseType(num)
	return nil
}

// Deprecated: Use LicenseType.Descriptor instead.
func (LicenseType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{0}
}

type PlatformVerificationStatus int32

const (
	// The platform is not verified.
	PlatformVerificationStatus_PLATFORM_UNVERIFIED PlatformVerificationStatus = 0
	// Tampering detected on the platform.
	PlatformVerificationStatus_PLATFORM_TAMPERED PlatformVerificationStatus = 1
	// The platform has been verified by means of software.
	PlatformVerificationStatus_PLATFORM_SOFTWARE_VERIFIED PlatformVerificationStatus = 2
	// The platform has been verified by means of hardware (e.g. secure boot).
	PlatformVerificationStatus_PLATFORM_HARDWARE_VERIFIED PlatformVerificationStatus = 3
	// Platform verification was not performed.
	PlatformVerificationStatus_PLATFORM_NO_VERIFICATION PlatformVerificationStatus = 4
	// Platform and secure storage capability have been verified by means of
	// software.
	PlatformVerificationStatus_PLATFORM_SECURE_STORAGE_SOFTWARE_VERIFIED PlatformVerificationStatus = 5
)

// Enum value maps for PlatformVerificationStatus.
var (
	PlatformVerificationStatus_name = map[int32]string{
		0: "PLATFORM_UNVERIFIED",
		1: "PLATFORM_TAMPERED",
		2: "PLATFORM_SOFTWARE_VERIFIED",
		3: "PLATFORM_HARDWARE_VERIFIED",
		4: "PLATFORM_NO_VERIFICATION",
		5: "PLATFORM_SECURE_STORAGE_SOFTWARE_VERIFIED",
	}
	PlatformVerificationStatus_value = map[string]int32{
		"PLATFORM_UNVERIFIED":                       0,
		"PLATFORM_TAMPERED":                         1,
		"PLATFORM_SOFTWARE_VERIFIED":                2,
		"PLATFORM_HARDWARE_VERIFIED":                3,
		"PLATFORM_NO_VERIFICATION":                  4,
		"PLATFORM_SECURE_STORAGE_SOFTWARE_VERIFIED": 5,
	}
)

func (x PlatformVerificationStatus) Enum() *PlatformVerificationStatus {
	p := new(PlatformVerificationStatus)
	*p = x
	return p
}

func (x PlatformVerificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformVerificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[1].Descriptor()
}

func (PlatformVerificationStatus) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[1]
}

func (x PlatformVerificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlatformVerificationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlatformVerificationStatus(num)
	return nil
}

// Deprecated: Use PlatformVerificationStatus.Descriptor instead.
func (PlatformVerificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1}
}

type ProtocolVersion int32

const (
	ProtocolVersion_VERSION_2_0 ProtocolVersion = 20
	ProtocolVersion_VERSION_2_1 ProtocolVersion = 21
	ProtocolVersion_VERSION_2_2 ProtocolVersion = 22
)

// Enum value maps for ProtocolVersion.
var (
	ProtocolVersion_name = map[int32]string{
		20: "VERSION_2_0",
		21: "VERSION_2_1",
		22: "VERSION_2_2",
	}
	ProtocolVersion_value = map[string]int32{
		"VERSION_2_0": 20,
		"VERSION_2_1": 21,
		"VERSION_2_2": 22,
	}
)

func (x ProtocolVersion) Enum() *ProtocolVersion {
	p := new(ProtocolVersion)
	*p = x
	return p
}

func (x ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[2].Descriptor()
}

func (ProtocolVersion) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[2]
}

func (x ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtocolVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtocolVersion(num)
	return nil
}

// Deprecated: Use ProtocolVersion.Descriptor instead.
func (ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2}
}

type HashAlgorithmProto int32

const (
	// Unspecified hash algorithm: SHA_256 shall be used for ECC based algorithms
	// and SHA_1 shall be used otherwise.
	HashAlgorithmProto_HASH_ALGORITHM_UNSPECIFIED HashAlgorithmProto = 0
	HashAlgorithmProto_HASH_ALGORITHM_SHA_1       HashAlgorithmProto = 1
	HashAlgorithmProto_HASH_ALGORITHM_SHA_256     HashAlgorithmProto = 2
	HashAlgorithmProto_HASH_ALGORITHM_SHA_384     HashAlgorithmProto = 3
)

// Enum value maps for HashAlgorithmProto.
var (
	HashAlgorithmProto_name = map[int32]string{
		0: "HASH_ALGORITHM_UNSPECIFIED",
		1: "HASH_ALGORITHM_SHA_1",
		2: "HASH_ALGORITHM_SHA_256",
		3: "HASH_ALGORITHM_SHA_384",
	}
	HashAlgorithmProto_value = map[string]int32{
		"HASH_ALGORITHM_UNSPECIFIED": 0,
		"HASH_ALGORITHM_SHA_1":       1,
		"HASH_ALGORITHM_SHA_256":     2,
		"HASH_ALGORITHM_SHA_384":     3,
	}
)

func (x HashAlgorithmProto) Enum() *HashAlgorithmProto {
	p := new(HashAlgorithmProto)
	*p = x
	return p
}

func (x HashAlgorithmProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAlgorithmProto) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[3].Descriptor()
}

func (HashAlgorithmProto) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[3]
}

func (x HashAlgorithmProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HashAlgorithmProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HashAlgorithmProto(num)
	return nil
}

// Deprecated: Use HashAlgorithmProto.Descriptor instead.
func (HashAlgorithmProto) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{3}
}

type License_KeyContainer_KeyType int32

const (
	License_KeyContainer_SIGNING          License_KeyContainer_KeyType = 1 // Exactly one key of this type must appear.
	License_KeyContainer_CONTENT          License_KeyContainer_KeyType = 2 // Content key.
	License_KeyContainer_KEY_CONTROL      License_KeyContainer_KeyType = 3 // Key control block for license renewals. No key.
	License_KeyContainer_OPERATOR_SESSION License_KeyContainer_KeyType = 4 // wrapped keys for auxiliary crypto operations.
	License_KeyContainer_ENTITLEMENT      License_KeyContainer_KeyType = 5 // Entitlement keys.
	License_KeyContainer_OEM_CONTENT      License_KeyContainer_KeyType = 6 // Partner-specific content key.
)

// Enum value maps for License_KeyContainer_KeyType.
var (
	License_KeyContainer_KeyType_name = map[int32]string{
		1: "SIGNING",
		2: "CONTENT",
		3: "KEY_CONTROL",
		4: "OPERATOR_SESSION",
		5: "ENTITLEMENT",
		6: "OEM_CONTENT",
	}
	License_KeyContainer_KeyType_value = map[string]int32{
		"SIGNING":          1,
		"CONTENT":          2,
		"KEY_CONTROL":      3,
		"OPERATOR_SESSION": 4,
		"ENTITLEMENT":      5,
		"OEM_CONTENT":      6,
	}
)

func (x License_KeyContainer_KeyType) Enum() *License_KeyContainer_KeyType {
	p := new(License_KeyContainer_KeyType)
	*p = x
	return p
}

func (x License_KeyContainer_KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (License_KeyContainer_KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[4].Descriptor()
}

func (License_KeyContainer_KeyType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[4]
}

func (x License_KeyContainer_KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *License_KeyContainer_KeyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = License_KeyContainer_KeyType(num)
	return nil
}

// Deprecated: Use License_KeyContainer_KeyType.Descriptor instead.
func (License_KeyContainer_KeyType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1, 0}
}

// The SecurityLevel enumeration allows the server to communicate the level
// of robustness required by the client, in order to use the key.
type License_KeyContainer_SecurityLevel int32

const (
	// Software-based whitebox crypto is required.
	License_KeyContainer_SW_SECURE_CRYPTO License_KeyContainer_SecurityLevel = 1
	// Software crypto and an obfuscated decoder is required.
	License_KeyContainer_SW_SECURE_DECODE License_KeyContainer_SecurityLevel = 2
	// The key material and crypto operations must be performed within a
	// hardware backed trusted execution environment.
	License_KeyContainer_HW_SECURE_CRYPTO License_KeyContainer_SecurityLevel = 3
	// The crypto and decoding of content must be performed within a hardware
	// backed trusted execution environment.
	License_KeyContainer_HW_SECURE_DECODE License_KeyContainer_SecurityLevel = 4
	// The crypto, decoding and all handling of the media (compressed and
	// uncompressed) must be handled within a hardware backed trusted
	// execution environment.
	License_KeyContainer_HW_SECURE_ALL License_KeyContainer_SecurityLevel = 5
)

// Enum value maps for License_KeyContainer_SecurityLevel.
var (
	License_KeyContainer_SecurityLevel_name = map[int32]string{
		1: "SW_SECURE_CRYPTO",
		2: "SW_SECURE_DECODE",
		3: "HW_SECURE_CRYPTO",
		4: "HW_SECURE_DECODE",
		5: "HW_SECURE_ALL",
	}
	License_KeyContainer_SecurityLevel_value = map[string]int32{
		"SW_SECURE_CRYPTO": 1,
		"SW_SECURE_DECODE": 2,
		"HW_SECURE_CRYPTO": 3,
		"HW_SECURE_DECODE": 4,
		"HW_SECURE_ALL":    5,
	}
)

func (x License_KeyContainer_SecurityLevel) Enum() *License_KeyContainer_SecurityLevel {
	p := new(License_KeyContainer_SecurityLevel)
	*p = x
	return p
}

func (x License_KeyContainer_SecurityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (License_KeyContainer_SecurityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[5].Descriptor()
}

func (License_KeyContainer_SecurityLevel) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[5]
}

func (x License_KeyContainer_SecurityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *License_KeyContainer_SecurityLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = License_KeyContainer_SecurityLevel(num)
	return nil
}

// Deprecated: Use License_KeyContainer_SecurityLevel.Descriptor instead.
func (License_KeyContainer_SecurityLevel) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1, 1}
}

// Indicates whether HDCP is required on digital outputs, and which
// version should be used.
type License_KeyContainer_OutputProtection_HDCP int32

const (
	License_KeyContainer_OutputProtection_HDCP_NONE              License_KeyContainer_OutputProtection_HDCP = 0
	License_KeyContainer_OutputProtection_HDCP_V1                License_KeyContainer_OutputProtection_HDCP = 1
	License_KeyContainer_OutputProtection_HDCP_V2                License_KeyContainer_OutputProtection_HDCP = 2
	License_KeyContainer_OutputProtection_HDCP_V2_1              License_KeyContainer_OutputProtection_HDCP = 3
	License_KeyContainer_OutputProtection_HDCP_V2_2              License_KeyContainer_OutputProtection_HDCP = 4
	License_KeyContainer_OutputProtection_HDCP_V2_3              License_KeyContainer_OutputProtection_HDCP = 5
	License_KeyContainer_OutputProtection_HDCP_NO_DIGITAL_OUTPUT License_KeyContainer_OutputProtection_HDCP = 255
)

// Enum value maps for License_KeyContainer_OutputProtection_HDCP.
var (
	License_KeyContainer_OutputProtection_HDCP_name = map[int32]string{
		0:   "HDCP_NONE",
		1:   "HDCP_V1",
		2:   "HDCP_V2",
		3:   "HDCP_V2_1",
		4:   "HDCP_V2_2",
		5:   "HDCP_V2_3",
		255: "HDCP_NO_DIGITAL_OUTPUT",
	}
	License_KeyContainer_OutputProtection_HDCP_value = map[string]int32{
		"HDCP_NONE":              0,
		"HDCP_V1":                1,
		"HDCP_V2":                2,
		"HDCP_V2_1":              3,
		"HDCP_V2_2":              4,
		"HDCP_V2_3":              5,
		"HDCP_NO_DIGITAL_OUTPUT": 255,
	}
)

func (x License_KeyContainer_OutputProtection_HDCP) Enum() *License_KeyContainer_OutputProtection_HDCP {
	p := new(License_KeyContainer_OutputProtection_HDCP)
	*p = x
	return p
}

func (x License_KeyContainer_OutputProtection_HDCP) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (License_KeyContainer_OutputProtection_HDCP) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[6].Descriptor()
}

func (License_KeyContainer_OutputProtection_HDCP) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[6]
}

func (x License_KeyContainer_OutputProtection_HDCP) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *License_KeyContainer_OutputProtection_HDCP) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = License_KeyContainer_OutputProtection_HDCP(num)
	return nil
}

// Deprecated: Use License_KeyContainer_OutputProtection_HDCP.Descriptor instead.
func (License_KeyContainer_OutputProtection_HDCP) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1, 1, 0}
}

// Indicate the CGMS setting to be inserted on analog output.
type License_KeyContainer_OutputProtection_CGMS int32

const (
	License_KeyContainer_OutputProtection_CGMS_NONE  License_KeyContainer_OutputProtection_CGMS = 42
	License_KeyContainer_OutputProtection_COPY_FREE  License_KeyContainer_OutputProtection_CGMS = 0
	License_KeyContainer_OutputProtection_COPY_ONCE  License_KeyContainer_OutputProtection_CGMS = 2
	License_KeyContainer_OutputProtection_COPY_NEVER License_KeyContainer_OutputProtection_CGMS = 3
)

// Enum value maps for License_KeyContainer_OutputProtection_CGMS.
var (
	License_KeyContainer_OutputProtection_CGMS_name = map[int32]string{
		42: "CGMS_NONE",
		0:  "COPY_FREE",
		2:  "COPY_ONCE",
		3:  "COPY_NEVER",
	}
	License_KeyContainer_OutputProtection_CGMS_value = map[string]int32{
		"CGMS_NONE":  42,
		"COPY_FREE":  0,
		"COPY_ONCE":  2,
		"COPY_NEVER": 3,
	}
)

func (x License_KeyContainer_OutputProtection_CGMS) Enum() *License_KeyContainer_OutputProtection_CGMS {
	p := new(License_KeyContainer_OutputProtection_CGMS)
	*p = x
	return p
}

func (x License_KeyContainer_OutputProtection_CGMS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (License_KeyContainer_OutputProtection_CGMS) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[7].Descriptor()
}

func (License_KeyContainer_OutputProtection_CGMS) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[7]
}

func (x License_KeyContainer_OutputProtection_CGMS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *License_KeyContainer_OutputProtection_CGMS) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = License_KeyContainer_OutputProtection_CGMS(num)
	return nil
}

// Deprecated: Use License_KeyContainer_OutputProtection_CGMS.Descriptor instead.
func (License_KeyContainer_OutputProtection_CGMS) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1, 1, 1}
}

type License_KeyContainer_OutputProtection_HdcpSrmRule int32

const (
	License_KeyContainer_OutputProtection_HDCP_SRM_RULE_NONE License_KeyContainer_OutputProtection_HdcpSrmRule = 0
	// In 'required_protection', this means most current SRM is required.
	// Update the SRM on the device. If update cannot happen,
	// do not allow the key.
	// In 'requested_protection', this means most current SRM is requested.
	// Update the SRM on the device. If update cannot happen,
	// allow use of the key anyway.
	License_KeyContainer_OutputProtection_CURRENT_SRM License_KeyContainer_OutputProtection_HdcpSrmRule = 1
)

// Enum value maps for License_KeyContainer_OutputProtection_HdcpSrmRule.
var (
	License_KeyContainer_OutputProtection_HdcpSrmRule_name = map[int32]string{
		0: "HDCP_SRM_RULE_NONE",
		1: "CURRENT_SRM",
	}
	License_KeyContainer_OutputProtection_HdcpSrmRule_value = map[string]int32{
		"HDCP_SRM_RULE_NONE": 0,
		"CURRENT_SRM":        1,
	}
)

func (x License_KeyContainer_OutputProtection_HdcpSrmRule) Enum() *License_KeyContainer_OutputProtection_HdcpSrmRule {
	p := new(License_KeyContainer_OutputProtection_HdcpSrmRule)
	*p = x
	return p
}

func (x License_KeyContainer_OutputProtection_HdcpSrmRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (License_KeyContainer_OutputProtection_HdcpSrmRule) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[8].Descriptor()
}

func (License_KeyContainer_OutputProtection_HdcpSrmRule) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[8]
}

func (x License_KeyContainer_OutputProtection_HdcpSrmRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *License_KeyContainer_OutputProtection_HdcpSrmRule) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = License_KeyContainer_OutputProtection_HdcpSrmRule(num)
	return nil
}

// Deprecated: Use License_KeyContainer_OutputProtection_HdcpSrmRule.Descriptor instead.
func (License_KeyContainer_OutputProtection_HdcpSrmRule) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1, 1, 2}
}

type LicenseRequest_RequestType int32

const (
	LicenseRequest_NEW     LicenseRequest_RequestType = 1
	LicenseRequest_RENEWAL LicenseRequest_RequestType = 2
	LicenseRequest_RELEASE LicenseRequest_RequestType = 3
)

// Enum value maps for LicenseRequest_RequestType.
var (
	LicenseRequest_RequestType_name = map[int32]string{
		1: "NEW",
		2: "RENEWAL",
		3: "RELEASE",
	}
	LicenseRequest_RequestType_value = map[string]int32{
		"NEW":     1,
		"RENEWAL": 2,
		"RELEASE": 3,
	}
)

func (x LicenseRequest_RequestType) Enum() *LicenseRequest_RequestType {
	p := new(LicenseRequest_RequestType)
	*p = x
	return p
}

func (x LicenseRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[9].Descriptor()
}

func (LicenseRequest_RequestType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[9]
}

func (x LicenseRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LicenseRequest_RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LicenseRequest_RequestType(num)
	return nil
}

// Deprecated: Use LicenseRequest_RequestType.Descriptor instead.
func (LicenseRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2, 0}
}

type LicenseRequest_ContentIdentification_InitData_InitDataType int32

const (
	LicenseRequest_ContentIdentification_InitData_CENC LicenseRequest_ContentIdentification_InitData_InitDataType = 1
	LicenseRequest_ContentIdentification_InitData_WEBM LicenseRequest_ContentIdentification_InitData_InitDataType = 2
)

// Enum value maps for LicenseRequest_ContentIdentification_InitData_InitDataType.
var (
	LicenseRequest_ContentIdentification_InitData_InitDataType_name = map[int32]string{
		1: "CENC",
		2: "WEBM",
	}
	LicenseRequest_ContentIdentification_InitData_InitDataType_value = map[string]int32{
		"CENC": 1,
		"WEBM": 2,
	}
)

func (x LicenseRequest_ContentIdentification_InitData_InitDataType) Enum() *LicenseRequest_ContentIdentification_InitData_InitDataType {
	p := new(LicenseRequest_ContentIdentification_InitData_InitDataType)
	*p = x
	return p
}

func (x LicenseRequest_ContentIdentification_InitData_InitDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseRequest_ContentIdentification_InitData_InitDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[10].Descriptor()
}

func (LicenseRequest_ContentIdentification_InitData_InitDataType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[10]
}

func (x LicenseRequest_ContentIdentification_InitData_InitDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LicenseRequest_ContentIdentification_InitData_InitDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LicenseRequest_ContentIdentification_InitData_InitDataType(num)
	return nil
}

// Deprecated: Use LicenseRequest_ContentIdentification_InitData_InitDataType.Descriptor instead.
func (LicenseRequest_ContentIdentification_InitData_InitDataType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2, 0, 3, 0}
}

type MetricData_MetricType int32

const (
	// The time spent in the 'stage', specified in microseconds.
	MetricData_LATENCY MetricData_MetricType = 1
	// The UNIX epoch timestamp at which the 'stage' was first accessed in
	// microseconds.
	MetricData_TIMESTAMP MetricData_MetricType = 2
)

// Enum value maps for MetricData_MetricType.
var (
	MetricData_MetricType_name = map[int32]string{
		1: "LATENCY",
		2: "TIMESTAMP",
	}
	MetricData_MetricType_value = map[string]int32{
		"LATENCY":   1,
		"TIMESTAMP": 2,
	}
)

func (x MetricData_MetricType) Enum() *MetricData_MetricType {
	p := new(MetricData_MetricType)
	*p = x
	return p
}

func (x MetricData_MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricData_MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[11].Descriptor()
}

func (MetricData_MetricType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[11]
}

func (x MetricData_MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MetricData_MetricType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MetricData_MetricType(num)
	return nil
}

// Deprecated: Use MetricData_MetricType.Descriptor instead.
func (MetricData_MetricType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{3, 0}
}

type SignedMessage_MessageType int32

const (
	SignedMessage_LICENSE_REQUEST             SignedMessage_MessageType = 1
	SignedMessage_LICENSE                     SignedMessage_MessageType = 2
	SignedMessage_ERROR_RESPONSE              SignedMessage_MessageType = 3
	SignedMessage_SERVICE_CERTIFICATE_REQUEST SignedMessage_MessageType = 4
	SignedMessage_SERVICE_CERTIFICATE         SignedMessage_MessageType = 5
	SignedMessage_SUB_LICENSE                 SignedMessage_MessageType = 6
	SignedMessage_CAS_LICENSE_REQUEST         SignedMessage_MessageType = 7
	SignedMessage_CAS_LICENSE                 SignedMessage_MessageType = 8
	SignedMessage_EXTERNAL_LICENSE_REQUEST    SignedMessage_MessageType = 9
	SignedMessage_EXTERNAL_LICENSE            SignedMessage_MessageType = 10
)

// Enum value maps for SignedMessage_MessageType.
var (
	SignedMessage_MessageType_name = map[int32]string{
		1:  "LICENSE_REQUEST",
		2:  "LICENSE",
		3:  "ERROR_RESPONSE",
		4:  "SERVICE_CERTIFICATE_REQUEST",
		5:  "SERVICE_CERTIFICATE",
		6:  "SUB_LICENSE",
		7:  "CAS_LICENSE_REQUEST",
		8:  "CAS_LICENSE",
		9:  "EXTERNAL_LICENSE_REQUEST",
		10: "EXTERNAL_LICENSE",
	}
	SignedMessage_MessageType_value = map[string]int32{
		"LICENSE_REQUEST":             1,
		"LICENSE":                     2,
		"ERROR_RESPONSE":              3,
		"SERVICE_CERTIFICATE_REQUEST": 4,
		"SERVICE_CERTIFICATE":         5,
		"SUB_LICENSE":                 6,
		"CAS_LICENSE_REQUEST":         7,
		"CAS_LICENSE":                 8,
		"EXTERNAL_LICENSE_REQUEST":    9,
		"EXTERNAL_LICENSE":            10,
	}
)

func (x SignedMessage_MessageType) Enum() *SignedMessage_MessageType {
	p := new(SignedMessage_MessageType)
	*p = x
	return p
}

func (x SignedMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignedMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[12].Descriptor()
}

func (SignedMessage_MessageType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[12]
}

func (x SignedMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SignedMessage_MessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SignedMessage_MessageType(num)
	return nil
}

// Deprecated: Use SignedMessage_MessageType.Descriptor instead.
func (SignedMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{5, 0}
}

type SignedMessage_SessionKeyType int32

const (
	SignedMessage_UNDEFINED                 SignedMessage_SessionKeyType = 0
	SignedMessage_WRAPPED_AES_KEY           SignedMessage_SessionKeyType = 1
	SignedMessage_EPHERMERAL_ECC_PUBLIC_KEY SignedMessage_SessionKeyType = 2
)

// Enum value maps for SignedMessage_SessionKeyType.
var (
	SignedMessage_SessionKeyType_name = map[int32]string{
		0: "UNDEFINED",
		1: "WRAPPED_AES_KEY",
		2: "EPHERMERAL_ECC_PUBLIC_KEY",
	}
	SignedMessage_SessionKeyType_value = map[string]int32{
		"UNDEFINED":                 0,
		"WRAPPED_AES_KEY":           1,
		"EPHERMERAL_ECC_PUBLIC_KEY": 2,
	}
)

func (x SignedMessage_SessionKeyType) Enum() *SignedMessage_SessionKeyType {
	p := new(SignedMessage_SessionKeyType)
	*p = x
	return p
}

func (x SignedMessage_SessionKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignedMessage_SessionKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[13].Descriptor()
}

func (SignedMessage_SessionKeyType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[13]
}

func (x SignedMessage_SessionKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SignedMessage_SessionKeyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SignedMessage_SessionKeyType(num)
	return nil
}

// Deprecated: Use SignedMessage_SessionKeyType.Descriptor instead.
func (SignedMessage_SessionKeyType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{5, 1}
}

type ClientIdentification_TokenType int32

const (
	ClientIdentification_KEYBOX                         ClientIdentification_TokenType = 0
	ClientIdentification_DRM_DEVICE_CERTIFICATE         ClientIdentification_TokenType = 1
	ClientIdentification_REMOTE_ATTESTATION_CERTIFICATE ClientIdentification_TokenType = 2
	ClientIdentification_OEM_DEVICE_CERTIFICATE         ClientIdentification_TokenType = 3
)

// Enum value maps for ClientIdentification_TokenType.
var (
	ClientIdentification_TokenType_name = map[int32]string{
		0: "KEYBOX",
		1: "DRM_DEVICE_CERTIFICATE",
		2: "REMOTE_ATTESTATION_CERTIFICATE",
		3: "OEM_DEVICE_CERTIFICATE",
	}
	ClientIdentification_TokenType_value = map[string]int32{
		"KEYBOX":                         0,
		"DRM_DEVICE_CERTIFICATE":         1,
		"REMOTE_ATTESTATION_CERTIFICATE": 2,
		"OEM_DEVICE_CERTIFICATE":         3,
	}
)

func (x ClientIdentification_TokenType) Enum() *ClientIdentification_TokenType {
	p := new(ClientIdentification_TokenType)
	*p = x
	return p
}

func (x ClientIdentification_TokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientIdentification_TokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[14].Descriptor()
}

func (ClientIdentification_TokenType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[14]
}

func (x ClientIdentification_TokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientIdentification_TokenType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientIdentification_TokenType(num)
	return nil
}

// Deprecated: Use ClientIdentification_TokenType.Descriptor instead.
func (ClientIdentification_TokenType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{6, 0}
}

type ClientIdentification_ClientCapabilities_HdcpVersion int32

const (
	ClientIdentification_ClientCapabilities_HDCP_NONE              ClientIdentification_ClientCapabilities_HdcpVersion = 0
	ClientIdentification_ClientCapabilities_HDCP_V1                ClientIdentification_ClientCapabilities_HdcpVersion = 1
	ClientIdentification_ClientCapabilities_HDCP_V2                ClientIdentification_ClientCapabilities_HdcpVersion = 2
	ClientIdentification_ClientCapabilities_HDCP_V2_1              ClientIdentification_ClientCapabilities_HdcpVersion = 3
	ClientIdentification_ClientCapabilities_HDCP_V2_2              ClientIdentification_ClientCapabilities_HdcpVersion = 4
	ClientIdentification_ClientCapabilities_HDCP_V2_3              ClientIdentification_ClientCapabilities_HdcpVersion = 5
	ClientIdentification_ClientCapabilities_HDCP_NO_DIGITAL_OUTPUT ClientIdentification_ClientCapabilities_HdcpVersion = 255
)

// Enum value maps for ClientIdentification_ClientCapabilities_HdcpVersion.
var (
	ClientIdentification_ClientCapabilities_HdcpVersion_name = map[int32]string{
		0:   "HDCP_NONE",
		1:   "HDCP_V1",
		2:   "HDCP_V2",
		3:   "HDCP_V2_1",
		4:   "HDCP_V2_2",
		5:   "HDCP_V2_3",
		255: "HDCP_NO_DIGITAL_OUTPUT",
	}
	ClientIdentification_ClientCapabilities_HdcpVersion_value = map[string]int32{
		"HDCP_NONE":              0,
		"HDCP_V1":                1,
		"HDCP_V2":                2,
		"HDCP_V2_1":              3,
		"HDCP_V2_2":              4,
		"HDCP_V2_3":              5,
		"HDCP_NO_DIGITAL_OUTPUT": 255,
	}
)

func (x ClientIdentification_ClientCapabilities_HdcpVersion) Enum() *ClientIdentification_ClientCapabilities_HdcpVersion {
	p := new(ClientIdentification_ClientCapabilities_HdcpVersion)
	*p = x
	return p
}

func (x ClientIdentification_ClientCapabilities_HdcpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientIdentification_ClientCapabilities_HdcpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[15].Descriptor()
}

func (ClientIdentification_ClientCapabilities_HdcpVersion) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[15]
}

func (x ClientIdentification_ClientCapabilities_HdcpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientIdentification_ClientCapabilities_HdcpVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientIdentification_ClientCapabilities_HdcpVersion(num)
	return nil
}

// Deprecated: Use ClientIdentification_ClientCapabilities_HdcpVersion.Descriptor instead.
func (ClientIdentification_ClientCapabilities_HdcpVersion) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{6, 1, 0}
}

type ClientIdentification_ClientCapabilities_CertificateKeyType int32

const (
	ClientIdentification_ClientCapabilities_RSA_2048      ClientIdentification_ClientCapabilities_CertificateKeyType = 0
	ClientIdentification_ClientCapabilities_RSA_3072      ClientIdentification_ClientCapabilities_CertificateKeyType = 1
	ClientIdentification_ClientCapabilities_ECC_SECP256R1 ClientIdentification_ClientCapabilities_CertificateKeyType = 2
	ClientIdentification_ClientCapabilities_ECC_SECP384R1 ClientIdentification_ClientCapabilities_CertificateKeyType = 3
	ClientIdentification_ClientCapabilities_ECC_SECP521R1 ClientIdentification_ClientCapabilities_CertificateKeyType = 4
)

// Enum value maps for ClientIdentification_ClientCapabilities_CertificateKeyType.
var (
	ClientIdentification_ClientCapabilities_CertificateKeyType_name = map[int32]string{
		0: "RSA_2048",
		1: "RSA_3072",
		2: "ECC_SECP256R1",
		3: "ECC_SECP384R1",
		4: "ECC_SECP521R1",
	}
	ClientIdentification_ClientCapabilities_CertificateKeyType_value = map[string]int32{
		"RSA_2048":      0,
		"RSA_3072":      1,
		"ECC_SECP256R1": 2,
		"ECC_SECP384R1": 3,
		"ECC_SECP521R1": 4,
	}
)

func (x ClientIdentification_ClientCapabilities_CertificateKeyType) Enum() *ClientIdentification_ClientCapabilities_CertificateKeyType {
	p := new(ClientIdentification_ClientCapabilities_CertificateKeyType)
	*p = x
	return p
}

func (x ClientIdentification_ClientCapabilities_CertificateKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientIdentification_ClientCapabilities_CertificateKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[16].Descriptor()
}

func (ClientIdentification_ClientCapabilities_CertificateKeyType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[16]
}

func (x ClientIdentification_ClientCapabilities_CertificateKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientIdentification_ClientCapabilities_CertificateKeyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientIdentification_ClientCapabilities_CertificateKeyType(num)
	return nil
}

// Deprecated: Use ClientIdentification_ClientCapabilities_CertificateKeyType.Descriptor instead.
func (ClientIdentification_ClientCapabilities_CertificateKeyType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{6, 1, 1}
}

type ClientIdentification_ClientCapabilities_AnalogOutputCapabilities int32

const (
	ClientIdentification_ClientCapabilities_ANALOG_OUTPUT_UNKNOWN         ClientIdentification_ClientCapabilities_AnalogOutputCapabilities = 0
	ClientIdentification_ClientCapabilities_ANALOG_OUTPUT_NONE            ClientIdentification_ClientCapabilities_AnalogOutputCapabilities = 1
	ClientIdentification_ClientCapabilities_ANALOG_OUTPUT_SUPPORTED       ClientIdentification_ClientCapabilities_AnalogOutputCapabilities = 2
	ClientIdentification_ClientCapabilities_ANALOG_OUTPUT_SUPPORTS_CGMS_A ClientIdentification_ClientCapabilities_AnalogOutputCapabilities = 3
)

// Enum value maps for ClientIdentification_ClientCapabilities_AnalogOutputCapabilities.
var (
	ClientIdentification_ClientCapabilities_AnalogOutputCapabilities_name = map[int32]string{
		0: "ANALOG_OUTPUT_UNKNOWN",
		1: "ANALOG_OUTPUT_NONE",
		2: "ANALOG_OUTPUT_SUPPORTED",
		3: "ANALOG_OUTPUT_SUPPORTS_CGMS_A",
	}
	ClientIdentification_ClientCapabilities_AnalogOutputCapabilities_value = map[string]int32{
		"ANALOG_OUTPUT_UNKNOWN":         0,
		"ANALOG_OUTPUT_NONE":            1,
		"ANALOG_OUTPUT_SUPPORTED":       2,
		"ANALOG_OUTPUT_SUPPORTS_CGMS_A": 3,
	}
)

func (x ClientIdentification_ClientCapabilities_AnalogOutputCapabilities) Enum() *ClientIdentification_ClientCapabilities_AnalogOutputCapabilities {
	p := new(ClientIdentification_ClientCapabilities_AnalogOutputCapabilities)
	*p = x
	return p
}

func (x ClientIdentification_ClientCapabilities_AnalogOutputCapabilities) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientIdentification_ClientCapabilities_AnalogOutputCapabilities) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[17].Descriptor()
}

func (ClientIdentification_ClientCapabilities_AnalogOutputCapabilities) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[17]
}

func (x ClientIdentification_ClientCapabilities_AnalogOutputCapabilities) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientIdentification_ClientCapabilities_AnalogOutputCapabilities) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientIdentification_ClientCapabilities_AnalogOutputCapabilities(num)
	return nil
}

// Deprecated: Use ClientIdentification_ClientCapabilities_AnalogOutputCapabilities.Descriptor instead.
func (ClientIdentification_ClientCapabilities_AnalogOutputCapabilities) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{6, 1, 2}
}

type DrmCertificate_Type int32

const (
	DrmCertificate_ROOT         DrmCertificate_Type = 0 // ProtoBestPractices: ignore.
	DrmCertificate_DEVICE_MODEL DrmCertificate_Type = 1
	DrmCertificate_DEVICE       DrmCertificate_Type = 2
	DrmCertificate_SERVICE      DrmCertificate_Type = 3
	DrmCertificate_PROVISIONER  DrmCertificate_Type = 4
)

// Enum value maps for DrmCertificate_Type.
var (
	DrmCertificate_Type_name = map[int32]string{
		0: "ROOT",
		1: "DEVICE_MODEL",
		2: "DEVICE",
		3: "SERVICE",
		4: "PROVISIONER",
	}
	DrmCertificate_Type_value = map[string]int32{
		"ROOT":         0,
		"DEVICE_MODEL": 1,
		"DEVICE":       2,
		"SERVICE":      3,
		"PROVISIONER":  4,
	}
)

func (x DrmCertificate_Type) Enum() *DrmCertificate_Type {
	p := new(DrmCertificate_Type)
	*p = x
	return p
}

func (x DrmCertificate_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrmCertificate_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[18].Descriptor()
}

func (DrmCertificate_Type) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[18]
}

func (x DrmCertificate_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DrmCertificate_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DrmCertificate_Type(num)
	return nil
}

// Deprecated: Use DrmCertificate_Type.Descriptor instead.
func (DrmCertificate_Type) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{8, 0}
}

type DrmCertificate_ServiceType int32

const (
	DrmCertificate_UNKNOWN_SERVICE_TYPE     DrmCertificate_ServiceType = 0
	DrmCertificate_LICENSE_SERVER_SDK       DrmCertificate_ServiceType = 1
	DrmCertificate_LICENSE_SERVER_PROXY_SDK DrmCertificate_ServiceType = 2
	DrmCertificate_PROVISIONING_SDK         DrmCertificate_ServiceType = 3
	DrmCertificate_CAS_PROXY_SDK            DrmCertificate_ServiceType = 4
)

// Enum value maps for DrmCertificate_ServiceType.
var (
	DrmCertificate_ServiceType_name = map[int32]string{
		0: "UNKNOWN_SERVICE_TYPE",
		1: "LICENSE_SERVER_SDK",
		2: "LICENSE_SERVER_PROXY_SDK",
		3: "PROVISIONING_SDK",
		4: "CAS_PROXY_SDK",
	}
	DrmCertificate_ServiceType_value = map[string]int32{
		"UNKNOWN_SERVICE_TYPE":     0,
		"LICENSE_SERVER_SDK":       1,
		"LICENSE_SERVER_PROXY_SDK": 2,
		"PROVISIONING_SDK":         3,
		"CAS_PROXY_SDK":            4,
	}
)

func (x DrmCertificate_ServiceType) Enum() *DrmCertificate_ServiceType {
	p := new(DrmCertificate_ServiceType)
	*p = x
	return p
}

func (x DrmCertificate_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrmCertificate_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[19].Descriptor()
}

func (DrmCertificate_ServiceType) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[19]
}

func (x DrmCertificate_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DrmCertificate_ServiceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DrmCertificate_ServiceType(num)
	return nil
}

// Deprecated: Use DrmCertificate_ServiceType.Descriptor instead.
func (DrmCertificate_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{8, 1}
}

type DrmCertificate_Algorithm int32

const (
	DrmCertificate_UNKNOWN_ALGORITHM DrmCertificate_Algorithm = 0
	DrmCertificate_RSA               DrmCertificate_Algorithm = 1
	DrmCertificate_ECC_SECP256R1     DrmCertificate_Algorithm = 2
	DrmCertificate_ECC_SECP384R1     DrmCertificate_Algorithm = 3
	DrmCertificate_ECC_SECP521R1     DrmCertificate_Algorithm = 4
)

// Enum value maps for DrmCertificate_Algorithm.
var (
	DrmCertificate_Algorithm_name = map[int32]string{
		0: "UNKNOWN_ALGORITHM",
		1: "RSA",
		2: "ECC_SECP256R1",
		3: "ECC_SECP384R1",
		4: "ECC_SECP521R1",
	}
	DrmCertificate_Algorithm_value = map[string]int32{
		"UNKNOWN_ALGORITHM": 0,
		"RSA":               1,
		"ECC_SECP256R1":     2,
		"ECC_SECP384R1":     3,
		"ECC_SECP521R1":     4,
	}
)

func (x DrmCertificate_Algorithm) Enum() *DrmCertificate_Algorithm {
	p := new(DrmCertificate_Algorithm)
	*p = x
	return p
}

func (x DrmCertificate_Algorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrmCertificate_Algorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[20].Descriptor()
}

func (DrmCertificate_Algorithm) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[20]
}

func (x DrmCertificate_Algorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DrmCertificate_Algorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DrmCertificate_Algorithm(num)
	return nil
}

// Deprecated: Use DrmCertificate_Algorithm.Descriptor instead.
func (DrmCertificate_Algorithm) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{8, 2}
}

type WidevinePsshData_Type int32

const (
	WidevinePsshData_SINGLE       WidevinePsshData_Type = 0 // Single PSSH to be used to retrieve content keys.
	WidevinePsshData_ENTITLEMENT  WidevinePsshData_Type = 1 // Primary PSSH used to retrieve entitlement keys.
	WidevinePsshData_ENTITLED_KEY WidevinePsshData_Type = 2 // Secondary PSSH containing entitled key(s).
)

// Enum value maps for WidevinePsshData_Type.
var (
	WidevinePsshData_Type_name = map[int32]string{
		0: "SINGLE",
		1: "ENTITLEMENT",
		2: "ENTITLED_KEY",
	}
	WidevinePsshData_Type_value = map[string]int32{
		"SINGLE":       0,
		"ENTITLEMENT":  1,
		"ENTITLED_KEY": 2,
	}
)

func (x WidevinePsshData_Type) Enum() *WidevinePsshData_Type {
	p := new(WidevinePsshData_Type)
	*p = x
	return p
}

func (x WidevinePsshData_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WidevinePsshData_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[21].Descriptor()
}

func (WidevinePsshData_Type) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[21]
}

func (x WidevinePsshData_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WidevinePsshData_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WidevinePsshData_Type(num)
	return nil
}

// Deprecated: Use WidevinePsshData_Type.Descriptor instead.
func (WidevinePsshData_Type) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{10, 0}
}

// //////////////////////////  Deprecated Fields  ////////////////////////////
type WidevinePsshData_Algorithm int32

const (
	WidevinePsshData_UNENCRYPTED WidevinePsshData_Algorithm = 0
	WidevinePsshData_AESCTR      WidevinePsshData_Algorithm = 1
)

// Enum value maps for WidevinePsshData_Algorithm.
var (
	WidevinePsshData_Algorithm_name = map[int32]string{
		0: "UNENCRYPTED",
		1: "AESCTR",
	}
	WidevinePsshData_Algorithm_value = map[string]int32{
		"UNENCRYPTED": 0,
		"AESCTR":      1,
	}
)

func (x WidevinePsshData_Algorithm) Enum() *WidevinePsshData_Algorithm {
	p := new(WidevinePsshData_Algorithm)
	*p = x
	return p
}

func (x WidevinePsshData_Algorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WidevinePsshData_Algorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_license_proto_enumTypes[22].Descriptor()
}

func (WidevinePsshData_Algorithm) Type() protoreflect.EnumType {
	return &file_license_proto_enumTypes[22]
}

func (x WidevinePsshData_Algorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WidevinePsshData_Algorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WidevinePsshData_Algorithm(num)
	return nil
}

// Deprecated: Use WidevinePsshData_Algorithm.Descriptor instead.
func (WidevinePsshData_Algorithm) EnumDescriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{10, 1}
}

// LicenseIdentification is propagated from LicenseRequest to License,
// incrementing version with each iteration.
type LicenseIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId            []byte       `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	SessionId            []byte       `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	PurchaseId           []byte       `protobuf:"bytes,3,opt,name=purchase_id,json=purchaseId" json:"purchase_id,omitempty"`
	Type                 *LicenseType `protobuf:"varint,4,opt,name=type,enum=license.LicenseType" json:"type,omitempty"`
	Version              *int32       `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	ProviderSessionToken []byte       `protobuf:"bytes,6,opt,name=provider_session_token,json=providerSessionToken" json:"provider_session_token,omitempty"`
}

func (x *LicenseIdentification) Reset() {
	*x = LicenseIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseIdentification) ProtoMessage() {}

func (x *LicenseIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseIdentification.ProtoReflect.Descriptor instead.
func (*LicenseIdentification) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{0}
}

func (x *LicenseIdentification) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *LicenseIdentification) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *LicenseIdentification) GetPurchaseId() []byte {
	if x != nil {
		return x.PurchaseId
	}
	return nil
}

func (x *LicenseIdentification) GetType() LicenseType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return LicenseType_STREAMING
}

func (x *LicenseIdentification) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *LicenseIdentification) GetProviderSessionToken() []byte {
	if x != nil {
		return x.ProviderSessionToken
	}
	return nil
}

type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *LicenseIdentification  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Policy *License_Policy         `protobuf:"bytes,2,opt,name=policy" json:"policy,omitempty"`
	Key    []*License_KeyContainer `protobuf:"bytes,3,rep,name=key" json:"key,omitempty"`
	// Time of the request in seconds (UTC) as set in
	// LicenseRequest.request_time.  If this time is not set in the request,
	// the local time at the license service is used in this field.
	LicenseStartTime          *int64 `protobuf:"varint,4,opt,name=license_start_time,json=licenseStartTime" json:"license_start_time,omitempty"`
	RemoteAttestationVerified *bool  `protobuf:"varint,5,opt,name=remote_attestation_verified,json=remoteAttestationVerified,def=0" json:"remote_attestation_verified,omitempty"`
	// Client token generated by the content provider. Optional.
	ProviderClientToken []byte `protobuf:"bytes,6,opt,name=provider_client_token,json=providerClientToken" json:"provider_client_token,omitempty"`
	// 4cc code specifying the CENC protection scheme as defined in the CENC 3.0
	// specification. Propagated from Widevine PSSH box. Optional.
	ProtectionScheme *uint32 `protobuf:"varint,7,opt,name=protection_scheme,json=protectionScheme" json:"protection_scheme,omitempty"`
	// 8 byte verification field "HDCPDATA" followed by unsigned 32 bit minimum
	// HDCP SRM version (whether the version is for HDCP1 SRM or HDCP2 SRM
	// depends on client max_hdcp_version).
	// Additional details can be found in Widevine Modular DRM Security
	// Integration Guide for CENC.
	SrmRequirement []byte `protobuf:"bytes,8,opt,name=srm_requirement,json=srmRequirement" json:"srm_requirement,omitempty"`
	// If present this contains a signed SRM file (either HDCP1 SRM or HDCP2 SRM
	// depending on client max_hdcp_version) that should be installed on the
	// client device.
	SrmUpdate []byte `protobuf:"bytes,9,opt,name=srm_update,json=srmUpdate" json:"srm_update,omitempty"`
	// Indicates the status of any type of platform verification performed by the
	// server.
	PlatformVerificationStatus *PlatformVerificationStatus `protobuf:"varint,10,opt,name=platform_verification_status,json=platformVerificationStatus,enum=license.PlatformVerificationStatus,def=4" json:"platform_verification_status,omitempty"`
	// IDs of the groups for which keys are delivered in this license, if any.
	GroupIds [][]byte `protobuf:"bytes,11,rep,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
}

// Default values for License fields.
const (
	Default_License_RemoteAttestationVerified  = bool(false)
	Default_License_PlatformVerificationStatus = PlatformVerificationStatus_PLATFORM_NO_VERIFICATION
)

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1}
}

func (x *License) GetId() *LicenseIdentification {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *License) GetPolicy() *License_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *License) GetKey() []*License_KeyContainer {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *License) GetLicenseStartTime() int64 {
	if x != nil && x.LicenseStartTime != nil {
		return *x.LicenseStartTime
	}
	return 0
}

func (x *License) GetRemoteAttestationVerified() bool {
	if x != nil && x.RemoteAttestationVerified != nil {
		return *x.RemoteAttestationVerified
	}
	return Default_License_RemoteAttestationVerified
}

func (x *License) GetProviderClientToken() []byte {
	if x != nil {
		return x.ProviderClientToken
	}
	return nil
}

func (x *License) GetProtectionScheme() uint32 {
	if x != nil && x.ProtectionScheme != nil {
		return *x.ProtectionScheme
	}
	return 0
}

func (x *License) GetSrmRequirement() []byte {
	if x != nil {
		return x.SrmRequirement
	}
	return nil
}

func (x *License) GetSrmUpdate() []byte {
	if x != nil {
		return x.SrmUpdate
	}
	return nil
}

func (x *License) GetPlatformVerificationStatus() PlatformVerificationStatus {
	if x != nil && x.PlatformVerificationStatus != nil {
		return *x.PlatformVerificationStatus
	}
	return Default_License_PlatformVerificationStatus
}

func (x *License) GetGroupIds() [][]byte {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type LicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The client_id provides information authenticating the calling device.  It
	// contains the Widevine keybox token that was installed on the device at the
	// factory.  This field or encrypted_client_id below is required for a valid
	// license request, but both should never be present in the same request.
	ClientId  *ClientIdentification                 `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	ContentId *LicenseRequest_ContentIdentification `protobuf:"bytes,2,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	Type      *LicenseRequest_RequestType           `protobuf:"varint,3,opt,name=type,enum=license.LicenseRequest_RequestType" json:"type,omitempty"`
	// Time of the request in seconds (UTC) as set by the client.
	RequestTime *int64 `protobuf:"varint,4,opt,name=request_time,json=requestTime" json:"request_time,omitempty"`
	// Old-style decimal-encoded string key control nonce.
	KeyControlNonceDeprecated []byte           `protobuf:"bytes,5,opt,name=key_control_nonce_deprecated,json=keyControlNonceDeprecated" json:"key_control_nonce_deprecated,omitempty"`
	ProtocolVersion           *ProtocolVersion `protobuf:"varint,6,opt,name=protocol_version,json=protocolVersion,enum=license.ProtocolVersion,def=20" json:"protocol_version,omitempty"`
	// New-style uint32 key control nonce, please use instead of
	// key_control_nonce_deprecated.
	KeyControlNonce *uint32 `protobuf:"varint,7,opt,name=key_control_nonce,json=keyControlNonce" json:"key_control_nonce,omitempty"`
	// Encrypted ClientIdentification message, used for privacy purposes.
	EncryptedClientId *EncryptedClientIdentification `protobuf:"bytes,8,opt,name=encrypted_client_id,json=encryptedClientId" json:"encrypted_client_id,omitempty"`
}

// Default values for LicenseRequest fields.
const (
	Default_LicenseRequest_ProtocolVersion = ProtocolVersion_VERSION_2_0
)

func (x *LicenseRequest) Reset() {
	*x = LicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseRequest) ProtoMessage() {}

func (x *LicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseRequest.ProtoReflect.Descriptor instead.
func (*LicenseRequest) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2}
}

func (x *LicenseRequest) GetClientId() *ClientIdentification {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *LicenseRequest) GetContentId() *LicenseRequest_ContentIdentification {
	if x != nil {
		return x.ContentId
	}
	return nil
}

func (x *LicenseRequest) GetType() LicenseRequest_RequestType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return LicenseRequest_NEW
}

func (x *LicenseRequest) GetRequestTime() int64 {
	if x != nil && x.RequestTime != nil {
		return *x.RequestTime
	}
	return 0
}

func (x *LicenseRequest) GetKeyControlNonceDeprecated() []byte {
	if x != nil {
		return x.KeyControlNonceDeprecated
	}
	return nil
}

func (x *LicenseRequest) GetProtocolVersion() ProtocolVersion {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return Default_LicenseRequest_ProtocolVersion
}

func (x *LicenseRequest) GetKeyControlNonce() uint32 {
	if x != nil && x.KeyControlNonce != nil {
		return *x.KeyControlNonce
	}
	return 0
}

func (x *LicenseRequest) GetEncryptedClientId() *EncryptedClientIdentification {
	if x != nil {
		return x.EncryptedClientId
	}
	return nil
}

type MetricData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 'stage' that is currently processing the SignedMessage.  Required.
	StageName *string `protobuf:"bytes,1,opt,name=stage_name,json=stageName" json:"stage_name,omitempty"`
	// metric and associated value.
	MetricData []*MetricData_TypeValue `protobuf:"bytes,2,rep,name=metric_data,json=metricData" json:"metric_data,omitempty"`
}

func (x *MetricData) Reset() {
	*x = MetricData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricData) ProtoMessage() {}

func (x *MetricData) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricData.ProtoReflect.Descriptor instead.
func (*MetricData) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{3}
}

func (x *MetricData) GetStageName() string {
	if x != nil && x.StageName != nil {
		return *x.StageName
	}
	return ""
}

func (x *MetricData) GetMetricData() []*MetricData_TypeValue {
	if x != nil {
		return x.MetricData
	}
	return nil
}

type VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// License SDK version reported by the Widevine License SDK. This field
	// is populated automatically by the SDK.
	LicenseSdkVersion *string `protobuf:"bytes,1,opt,name=license_sdk_version,json=licenseSdkVersion" json:"license_sdk_version,omitempty"`
	// Version of the service hosting the license SDK. This field is optional.
	// It may be provided by the hosting service.
	LicenseServiceVersion *string `protobuf:"bytes,2,opt,name=license_service_version,json=licenseServiceVersion" json:"license_service_version,omitempty"`
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo.ProtoReflect.Descriptor instead.
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{4}
}

func (x *VersionInfo) GetLicenseSdkVersion() string {
	if x != nil && x.LicenseSdkVersion != nil {
		return *x.LicenseSdkVersion
	}
	return ""
}

func (x *VersionInfo) GetLicenseServiceVersion() string {
	if x != nil && x.LicenseServiceVersion != nil {
		return *x.LicenseServiceVersion
	}
	return ""
}

type SignedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *SignedMessage_MessageType `protobuf:"varint,1,opt,name=type,enum=license.SignedMessage_MessageType" json:"type,omitempty"`
	Msg  []byte                     `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	// Required field that contains the signature of the bytes of msg.
	// For license requests, the signing algorithm is determined by the
	// certificate contained in the request.
	// For license responses, the signing algorithm is HMAC with signing key based
	// on |session_key|.
	Signature []byte `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	// If populated, the contents of this field will be signaled by the
	// |session_key_type| type. If the |session_key_type| is WRAPPED_AES_KEY the
	// key is the bytes of an encrypted AES key. If the |session_key_type| is
	// EPHERMERAL_ECC_PUBLIC_KEY the field contains the bytes of an RFC5208 ASN1
	// serialized ECC public key.
	SessionKey []byte `protobuf:"bytes,4,opt,name=session_key,json=sessionKey" json:"session_key,omitempty"`
	// Remote attestation data which will be present in the initial license
	// request for ChromeOS client devices operating in verified mode. Remote
	// attestation challenge data is |msg| field above. Optional.
	RemoteAttestation []byte        `protobuf:"bytes,5,opt,name=remote_attestation,json=remoteAttestation" json:"remote_attestation,omitempty"`
	MetricData        []*MetricData `protobuf:"bytes,6,rep,name=metric_data,json=metricData" json:"metric_data,omitempty"`
	// Version information from the SDK and license service. This information is
	// provided in the license response.
	ServiceVersionInfo *VersionInfo `protobuf:"bytes,7,opt,name=service_version_info,json=serviceVersionInfo" json:"service_version_info,omitempty"`
	// Optional field that contains the algorithm type used to generate the
	// session_key and signature in a LICENSE message.
	SessionKeyType *SignedMessage_SessionKeyType `protobuf:"varint,8,opt,name=session_key_type,json=sessionKeyType,enum=license.SignedMessage_SessionKeyType,def=1" json:"session_key_type,omitempty"`
	// The core message is the simple serialization of fields used by OEMCrypto.
	// This field was introduced in OEMCrypto API v16.
	OemcryptoCoreMessage []byte `protobuf:"bytes,9,opt,name=oemcrypto_core_message,json=oemcryptoCoreMessage" json:"oemcrypto_core_message,omitempty"`
}

// Default values for SignedMessage fields.
const (
	Default_SignedMessage_SessionKeyType = SignedMessage_WRAPPED_AES_KEY
)

func (x *SignedMessage) Reset() {
	*x = SignedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedMessage) ProtoMessage() {}

func (x *SignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedMessage.ProtoReflect.Descriptor instead.
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{5}
}

func (x *SignedMessage) GetType() SignedMessage_MessageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SignedMessage_LICENSE_REQUEST
}

func (x *SignedMessage) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *SignedMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedMessage) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *SignedMessage) GetRemoteAttestation() []byte {
	if x != nil {
		return x.RemoteAttestation
	}
	return nil
}

func (x *SignedMessage) GetMetricData() []*MetricData {
	if x != nil {
		return x.MetricData
	}
	return nil
}

func (x *SignedMessage) GetServiceVersionInfo() *VersionInfo {
	if x != nil {
		return x.ServiceVersionInfo
	}
	return nil
}

func (x *SignedMessage) GetSessionKeyType() SignedMessage_SessionKeyType {
	if x != nil && x.SessionKeyType != nil {
		return *x.SessionKeyType
	}
	return Default_SignedMessage_SessionKeyType
}

func (x *SignedMessage) GetOemcryptoCoreMessage() []byte {
	if x != nil {
		return x.OemcryptoCoreMessage
	}
	return nil
}

// ClientIdentification message used to authenticate the client device.
type ClientIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of factory-provisioned device root of trust. Optional.
	Type *ClientIdentification_TokenType `protobuf:"varint,1,opt,name=type,enum=license.ClientIdentification_TokenType,def=0" json:"type,omitempty"`
	// Factory-provisioned device root of trust. Required.
	Token []byte `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	// Optional client information name/value pairs.
	ClientInfo []*ClientIdentification_NameValue `protobuf:"bytes,3,rep,name=client_info,json=clientInfo" json:"client_info,omitempty"`
	// Client token generated by the content provider. Optional.
	ProviderClientToken []byte `protobuf:"bytes,4,opt,name=provider_client_token,json=providerClientToken" json:"provider_client_token,omitempty"`
	// Number of licenses received by the client to which the token above belongs.
	// Only present if client_token is specified.
	LicenseCounter *uint32 `protobuf:"varint,5,opt,name=license_counter,json=licenseCounter" json:"license_counter,omitempty"`
	// List of non-baseline client capabilities.
	ClientCapabilities *ClientIdentification_ClientCapabilities `protobuf:"bytes,6,opt,name=client_capabilities,json=clientCapabilities" json:"client_capabilities,omitempty"`
	// Serialized VmpData message. Optional.
	VmpData []byte `protobuf:"bytes,7,opt,name=vmp_data,json=vmpData" json:"vmp_data,omitempty"`
	// Optional field that may contain additional provisioning credentials.
	DeviceCredentials []*ClientIdentification_ClientCredentials `protobuf:"bytes,8,rep,name=device_credentials,json=deviceCredentials" json:"device_credentials,omitempty"`
}

// Default values for ClientIdentification fields.
const (
	Default_ClientIdentification_Type = ClientIdentification_KEYBOX
)

func (x *ClientIdentification) Reset() {
	*x = ClientIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientIdentification) ProtoMessage() {}

func (x *ClientIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientIdentification.ProtoReflect.Descriptor instead.
func (*ClientIdentification) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{6}
}

func (x *ClientIdentification) GetType() ClientIdentification_TokenType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ClientIdentification_Type
}

func (x *ClientIdentification) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ClientIdentification) GetClientInfo() []*ClientIdentification_NameValue {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *ClientIdentification) GetProviderClientToken() []byte {
	if x != nil {
		return x.ProviderClientToken
	}
	return nil
}

func (x *ClientIdentification) GetLicenseCounter() uint32 {
	if x != nil && x.LicenseCounter != nil {
		return *x.LicenseCounter
	}
	return 0
}

func (x *ClientIdentification) GetClientCapabilities() *ClientIdentification_ClientCapabilities {
	if x != nil {
		return x.ClientCapabilities
	}
	return nil
}

func (x *ClientIdentification) GetVmpData() []byte {
	if x != nil {
		return x.VmpData
	}
	return nil
}

func (x *ClientIdentification) GetDeviceCredentials() []*ClientIdentification_ClientCredentials {
	if x != nil {
		return x.DeviceCredentials
	}
	return nil
}

// EncryptedClientIdentification message used to hold ClientIdentification
// messages encrypted for privacy purposes.
type EncryptedClientIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider ID for which the ClientIdentifcation is encrypted (owner of
	// service certificate).
	ProviderId *string `protobuf:"bytes,1,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Serial number for the service certificate for which ClientIdentification is
	// encrypted.
	ServiceCertificateSerialNumber []byte `protobuf:"bytes,2,opt,name=service_certificate_serial_number,json=serviceCertificateSerialNumber" json:"service_certificate_serial_number,omitempty"`
	// Serialized ClientIdentification message, encrypted with the privacy key
	// using AES-128-CBC with PKCS#5 padding.
	EncryptedClientId []byte `protobuf:"bytes,3,opt,name=encrypted_client_id,json=encryptedClientId" json:"encrypted_client_id,omitempty"`
	// Initialization vector needed to decrypt encrypted_client_id.
	EncryptedClientIdIv []byte `protobuf:"bytes,4,opt,name=encrypted_client_id_iv,json=encryptedClientIdIv" json:"encrypted_client_id_iv,omitempty"`
	// AES-128 privacy key, encrypted with the service public key using RSA-OAEP.
	EncryptedPrivacyKey []byte `protobuf:"bytes,5,opt,name=encrypted_privacy_key,json=encryptedPrivacyKey" json:"encrypted_privacy_key,omitempty"`
}

func (x *EncryptedClientIdentification) Reset() {
	*x = EncryptedClientIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedClientIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedClientIdentification) ProtoMessage() {}

func (x *EncryptedClientIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedClientIdentification.ProtoReflect.Descriptor instead.
func (*EncryptedClientIdentification) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{7}
}

func (x *EncryptedClientIdentification) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *EncryptedClientIdentification) GetServiceCertificateSerialNumber() []byte {
	if x != nil {
		return x.ServiceCertificateSerialNumber
	}
	return nil
}

func (x *EncryptedClientIdentification) GetEncryptedClientId() []byte {
	if x != nil {
		return x.EncryptedClientId
	}
	return nil
}

func (x *EncryptedClientIdentification) GetEncryptedClientIdIv() []byte {
	if x != nil {
		return x.EncryptedClientIdIv
	}
	return nil
}

func (x *EncryptedClientIdentification) GetEncryptedPrivacyKey() []byte {
	if x != nil {
		return x.EncryptedPrivacyKey
	}
	return nil
}

// DRM certificate definition for user devices, intermediate, service, and root
// certificates.
type DrmCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of certificate. Required.
	Type *DrmCertificate_Type `protobuf:"varint,1,opt,name=type,enum=license.DrmCertificate_Type" json:"type,omitempty"`
	// 128-bit globally unique serial number of certificate.
	// Value is 0 for root certificate. Required.
	SerialNumber []byte `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	// POSIX time, in seconds, when the certificate was created. Required.
	CreationTimeSeconds *uint32 `protobuf:"varint,3,opt,name=creation_time_seconds,json=creationTimeSeconds" json:"creation_time_seconds,omitempty"`
	// POSIX time, in seconds, when the certificate should expire. Value of zero
	// denotes indefinite expiry time. For more information on limited lifespan
	// DRM certificates see (go/limited-lifespan-drm-certificates).
	ExpirationTimeSeconds *uint32 `protobuf:"varint,12,opt,name=expiration_time_seconds,json=expirationTimeSeconds" json:"expiration_time_seconds,omitempty"`
	// Device public key. PKCS#1 ASN.1 DER-encoded. Required.
	PublicKey []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	// Widevine system ID for the device. Required for intermediate and
	// user device certificates.
	SystemId *uint32 `protobuf:"varint,5,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	// Deprecated field, which used to indicate whether the device was a test
	// (non-production) device. The test_device field in ProvisionedDeviceInfo
	// below should be observed instead.
	//
	// Deprecated: Marked as deprecated in license.proto.
	TestDeviceDeprecated *bool `protobuf:"varint,6,opt,name=test_device_deprecated,json=testDeviceDeprecated" json:"test_device_deprecated,omitempty"`
	// Service identifier (web origin) for the provider which owns the
	// certificate. Required for service and provisioner certificates.
	ProviderId *string `protobuf:"bytes,7,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// This field is used only when type = SERVICE to specify which SDK uses
	// service certificate. This repeated field is treated as a set. A certificate
	// may be used for the specified service SDK if the appropriate ServiceType
	// is specified in this field.
	ServiceTypes []DrmCertificate_ServiceType `protobuf:"varint,8,rep,name=service_types,json=serviceTypes,enum=license.DrmCertificate_ServiceType" json:"service_types,omitempty"`
	// Required. The algorithm field contains the curve used to create the
	// |public_key| if algorithm is one of the ECC types.
	// The |algorithm| is used for both to determine the if the certificate is ECC
	// or RSA. The |algorithm| also specifies the parameters that were used to
	// create |public_key| and are used to create an ephemeral session key.
	Algorithm *DrmCertificate_Algorithm `protobuf:"varint,9,opt,name=algorithm,enum=license.DrmCertificate_Algorithm,def=1" json:"algorithm,omitempty"`
	// Optional. May be present in DEVICE certificate types. This is the root
	// of trust identifier that holds an encrypted value that identifies the
	// keybox or other root of trust that was used to provision a DEVICE drm
	// certificate.
	RotId []byte `protobuf:"bytes,10,opt,name=rot_id,json=rotId" json:"rot_id,omitempty"`
	// Optional. May be present in devices that explicitly support dual keys. When
	// present the |public_key| is used for verification of received license
	// request messages.
	EncryptionKey *DrmCertificate_EncryptionKey `protobuf:"bytes,11,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
}

// Default values for DrmCertificate fields.
const (
	Default_DrmCertificate_Algorithm = DrmCertificate_RSA
)

func (x *DrmCertificate) Reset() {
	*x = DrmCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrmCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrmCertificate) ProtoMessage() {}

func (x *DrmCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrmCertificate.ProtoReflect.Descriptor instead.
func (*DrmCertificate) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{8}
}

func (x *DrmCertificate) GetType() DrmCertificate_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DrmCertificate_ROOT
}

func (x *DrmCertificate) GetSerialNumber() []byte {
	if x != nil {
		return x.SerialNumber
	}
	return nil
}

func (x *DrmCertificate) GetCreationTimeSeconds() uint32 {
	if x != nil && x.CreationTimeSeconds != nil {
		return *x.CreationTimeSeconds
	}
	return 0
}

func (x *DrmCertificate) GetExpirationTimeSeconds() uint32 {
	if x != nil && x.ExpirationTimeSeconds != nil {
		return *x.ExpirationTimeSeconds
	}
	return 0
}

func (x *DrmCertificate) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *DrmCertificate) GetSystemId() uint32 {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return 0
}

// Deprecated: Marked as deprecated in license.proto.
func (x *DrmCertificate) GetTestDeviceDeprecated() bool {
	if x != nil && x.TestDeviceDeprecated != nil {
		return *x.TestDeviceDeprecated
	}
	return false
}

func (x *DrmCertificate) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *DrmCertificate) GetServiceTypes() []DrmCertificate_ServiceType {
	if x != nil {
		return x.ServiceTypes
	}
	return nil
}

func (x *DrmCertificate) GetAlgorithm() DrmCertificate_Algorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return Default_DrmCertificate_Algorithm
}

func (x *DrmCertificate) GetRotId() []byte {
	if x != nil {
		return x.RotId
	}
	return nil
}

func (x *DrmCertificate) GetEncryptionKey() *DrmCertificate_EncryptionKey {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

// DrmCertificate signed by a higher (CA) DRM certificate.
type SignedDrmCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized certificate. Required.
	DrmCertificate []byte `protobuf:"bytes,1,opt,name=drm_certificate,json=drmCertificate" json:"drm_certificate,omitempty"`
	// Signature of certificate. Signed with root or intermediate
	// certificate specified below. Required.
	Signature []byte `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	// SignedDrmCertificate used to sign this certificate.
	Signer *SignedDrmCertificate `protobuf:"bytes,3,opt,name=signer" json:"signer,omitempty"`
	// Optional field that indicates the hash algorithm used in signature scheme.
	HashAlgorithm *HashAlgorithmProto `protobuf:"varint,4,opt,name=hash_algorithm,json=hashAlgorithm,enum=license.HashAlgorithmProto" json:"hash_algorithm,omitempty"`
}

func (x *SignedDrmCertificate) Reset() {
	*x = SignedDrmCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedDrmCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedDrmCertificate) ProtoMessage() {}

func (x *SignedDrmCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedDrmCertificate.ProtoReflect.Descriptor instead.
func (*SignedDrmCertificate) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{9}
}

func (x *SignedDrmCertificate) GetDrmCertificate() []byte {
	if x != nil {
		return x.DrmCertificate
	}
	return nil
}

func (x *SignedDrmCertificate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedDrmCertificate) GetSigner() *SignedDrmCertificate {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *SignedDrmCertificate) GetHashAlgorithm() HashAlgorithmProto {
	if x != nil && x.HashAlgorithm != nil {
		return *x.HashAlgorithm
	}
	return HashAlgorithmProto_HASH_ALGORITHM_UNSPECIFIED
}

type WidevinePsshData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entitlement or content key IDs. Can onnly present in SINGLE or ENTITLEMENT
	// PSSHs. May be repeated to facilitate delivery of multiple keys in a
	// single license. Cannot be used in conjunction with content_id or
	// group_ids, which are the preferred mechanism.
	KeyIds [][]byte `protobuf:"bytes,2,rep,name=key_ids,json=keyIds" json:"key_ids,omitempty"`
	// Content identifier which may map to multiple entitlement or content key
	// IDs to facilitate the delivery of multiple keys in a single license.
	// Cannot be present in conjunction with key_ids, but if used must be in all
	// PSSHs.
	ContentId []byte `protobuf:"bytes,4,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	// Crypto period index, for media using key rotation. Always corresponds to
	// The content key period. This means that if using entitlement licensing
	// the ENTITLED_KEY PSSHs will have sequential crypto_period_index's, whereas
	// the ENTITELEMENT PSSHs will have gaps in the sequence. Required if doing
	// key rotation.
	CryptoPeriodIndex *uint32 `protobuf:"varint,7,opt,name=crypto_period_index,json=cryptoPeriodIndex" json:"crypto_period_index,omitempty"`
	// Protection scheme identifying the encryption algorithm. The protection
	// scheme is represented as a uint32 value. The uint32 contains 4 bytes each
	// representing a single ascii character in one of the 4CC protection scheme
	// values. To be deprecated in favor of signaling from content.
	// 'cenc' (AES-CTR) protection_scheme = 0x63656E63,
	// 'cbc1' (AES-CBC) protection_scheme = 0x63626331,
	// 'cens' (AES-CTR pattern encryption) protection_scheme = 0x63656E73,
	// 'cbcs' (AES-CBC pattern encryption) protection_scheme = 0x63626373.
	ProtectionScheme *uint32 `protobuf:"varint,9,opt,name=protection_scheme,json=protectionScheme" json:"protection_scheme,omitempty"`
	// Optional. For media using key rotation, this represents the duration
	// of each crypto period in seconds.
	CryptoPeriodSeconds *uint32 `protobuf:"varint,10,opt,name=crypto_period_seconds,json=cryptoPeriodSeconds" json:"crypto_period_seconds,omitempty"`
	// Type of PSSH. Required if not SINGLE.
	Type *WidevinePsshData_Type `protobuf:"varint,11,opt,name=type,enum=license.WidevinePsshData_Type,def=0" json:"type,omitempty"`
	// Key sequence for Widevine-managed keys. Optional.
	KeySequence *uint32 `protobuf:"varint,12,opt,name=key_sequence,json=keySequence" json:"key_sequence,omitempty"`
	// Group identifiers for all groups to which the content belongs. This can
	// be used to deliver licenses to unlock multiple titles / channels.
	// Optional, and may only be present in ENTITLEMENT and ENTITLED_KEY PSSHs, and
	// not in conjunction with key_ids.
	GroupIds [][]byte `protobuf:"bytes,13,rep,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
	// Copy/copies of the content key used to decrypt the media stream in which
	// the PSSH box is embedded, each wrapped with a different entitlement key.
	// May also contain sub-licenses to support devices with OEMCrypto 13 or
	// older. May be repeated if using group entitlement keys. Present only in
	// PSSHs of type ENTITLED_KEY.
	EntitledKeys []*WidevinePsshData_EntitledKey `protobuf:"bytes,14,rep,name=entitled_keys,json=entitledKeys" json:"entitled_keys,omitempty"`
	// Video feature identifier, which is used in conjunction with |content_id|
	// to determine the set of keys to be returned in the license. Cannot be
	// present in conjunction with |key_ids|.
	// Current values are "HDR".
	VideoFeature *string `protobuf:"bytes,15,opt,name=video_feature,json=videoFeature" json:"video_feature,omitempty"`
	// Deprecated: Marked as deprecated in license.proto.
	Algorithm *WidevinePsshData_Algorithm `protobuf:"varint,1,opt,name=algorithm,enum=license.WidevinePsshData_Algorithm" json:"algorithm,omitempty"`
	// Content provider name.
	//
	// Deprecated: Marked as deprecated in license.proto.
	Provider *string `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	// Track type. Acceptable values are SD, HD and AUDIO. Used to
	// differentiate content keys used by an asset.
	//
	// Deprecated: Marked as deprecated in license.proto.
	TrackType *string `protobuf:"bytes,5,opt,name=track_type,json=trackType" json:"track_type,omitempty"`
	// The name of a registered policy to be used for this asset.
	//
	// Deprecated: Marked as deprecated in license.proto.
	Policy *string `protobuf:"bytes,6,opt,name=policy" json:"policy,omitempty"`
	// Optional protected context for group content. The grouped_license is a
	// serialized SignedMessage.
	//
	// Deprecated: Marked as deprecated in license.proto.
	GroupedLicense []byte `protobuf:"bytes,8,opt,name=grouped_license,json=groupedLicense" json:"grouped_license,omitempty"`
}

// Default values for WidevinePsshData fields.
const (
	Default_WidevinePsshData_Type = WidevinePsshData_SINGLE
)

func (x *WidevinePsshData) Reset() {
	*x = WidevinePsshData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidevinePsshData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidevinePsshData) ProtoMessage() {}

func (x *WidevinePsshData) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidevinePsshData.ProtoReflect.Descriptor instead.
func (*WidevinePsshData) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{10}
}

func (x *WidevinePsshData) GetKeyIds() [][]byte {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

func (x *WidevinePsshData) GetContentId() []byte {
	if x != nil {
		return x.ContentId
	}
	return nil
}

func (x *WidevinePsshData) GetCryptoPeriodIndex() uint32 {
	if x != nil && x.CryptoPeriodIndex != nil {
		return *x.CryptoPeriodIndex
	}
	return 0
}

func (x *WidevinePsshData) GetProtectionScheme() uint32 {
	if x != nil && x.ProtectionScheme != nil {
		return *x.ProtectionScheme
	}
	return 0
}

func (x *WidevinePsshData) GetCryptoPeriodSeconds() uint32 {
	if x != nil && x.CryptoPeriodSeconds != nil {
		return *x.CryptoPeriodSeconds
	}
	return 0
}

func (x *WidevinePsshData) GetType() WidevinePsshData_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_WidevinePsshData_Type
}

func (x *WidevinePsshData) GetKeySequence() uint32 {
	if x != nil && x.KeySequence != nil {
		return *x.KeySequence
	}
	return 0
}

func (x *WidevinePsshData) GetGroupIds() [][]byte {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *WidevinePsshData) GetEntitledKeys() []*WidevinePsshData_EntitledKey {
	if x != nil {
		return x.EntitledKeys
	}
	return nil
}

func (x *WidevinePsshData) GetVideoFeature() string {
	if x != nil && x.VideoFeature != nil {
		return *x.VideoFeature
	}
	return ""
}

// Deprecated: Marked as deprecated in license.proto.
func (x *WidevinePsshData) GetAlgorithm() WidevinePsshData_Algorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return WidevinePsshData_UNENCRYPTED
}

// Deprecated: Marked as deprecated in license.proto.
func (x *WidevinePsshData) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

// Deprecated: Marked as deprecated in license.proto.
func (x *WidevinePsshData) GetTrackType() string {
	if x != nil && x.TrackType != nil {
		return *x.TrackType
	}
	return ""
}

// Deprecated: Marked as deprecated in license.proto.
func (x *WidevinePsshData) GetPolicy() string {
	if x != nil && x.Policy != nil {
		return *x.Policy
	}
	return ""
}

// Deprecated: Marked as deprecated in license.proto.
func (x *WidevinePsshData) GetGroupedLicense() []byte {
	if x != nil {
		return x.GroupedLicense
	}
	return nil
}

// File Hashes for Verified Media Path (VMP) support.
type FileHashes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signer     []byte                  `protobuf:"bytes,1,opt,name=signer" json:"signer,omitempty"`
	Signatures []*FileHashes_Signature `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty"`
}

func (x *FileHashes) Reset() {
	*x = FileHashes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileHashes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHashes) ProtoMessage() {}

func (x *FileHashes) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHashes.ProtoReflect.Descriptor instead.
func (*FileHashes) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{11}
}

func (x *FileHashes) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *FileHashes) GetSignatures() []*FileHashes_Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type License_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates that playback of the content is allowed.
	CanPlay *bool `protobuf:"varint,1,opt,name=can_play,json=canPlay,def=0" json:"can_play,omitempty"`
	// Indicates that the license may be persisted to non-volatile
	// storage for offline use.
	CanPersist *bool `protobuf:"varint,2,opt,name=can_persist,json=canPersist,def=0" json:"can_persist,omitempty"`
	// Indicates that renewal of this license is allowed.
	CanRenew *bool `protobuf:"varint,3,opt,name=can_renew,json=canRenew,def=0" json:"can_renew,omitempty"`
	// Indicates the rental window.
	RentalDurationSeconds *int64 `protobuf:"varint,4,opt,name=rental_duration_seconds,json=rentalDurationSeconds,def=0" json:"rental_duration_seconds,omitempty"`
	// Indicates the viewing window, once playback has begun.
	PlaybackDurationSeconds *int64 `protobuf:"varint,5,opt,name=playback_duration_seconds,json=playbackDurationSeconds,def=0" json:"playback_duration_seconds,omitempty"`
	// Indicates the time window for this specific license.
	LicenseDurationSeconds *int64 `protobuf:"varint,6,opt,name=license_duration_seconds,json=licenseDurationSeconds,def=0" json:"license_duration_seconds,omitempty"`
	// The window of time, in which playback is allowed to continue while
	// renewal is attempted, yet unsuccessful due to backend problems with
	// the license server.
	RenewalRecoveryDurationSeconds *int64 `protobuf:"varint,7,opt,name=renewal_recovery_duration_seconds,json=renewalRecoveryDurationSeconds,def=0" json:"renewal_recovery_duration_seconds,omitempty"`
	// All renewal requests for this license shall be directed to the
	// specified URL.
	RenewalServerUrl *string `protobuf:"bytes,8,opt,name=renewal_server_url,json=renewalServerUrl" json:"renewal_server_url,omitempty"`
	// How many seconds after license_start_time, before renewal is first
	// attempted.
	RenewalDelaySeconds *int64 `protobuf:"varint,9,opt,name=renewal_delay_seconds,json=renewalDelaySeconds,def=0" json:"renewal_delay_seconds,omitempty"`
	// Specifies the delay in seconds between subsequent license
	// renewal requests, in case of failure.
	RenewalRetryIntervalSeconds *int64 `protobuf:"varint,10,opt,name=renewal_retry_interval_seconds,json=renewalRetryIntervalSeconds,def=0" json:"renewal_retry_interval_seconds,omitempty"`
	// Indicates that the license shall be sent for renewal when usage is
	// started.
	RenewWithUsage *bool `protobuf:"varint,11,opt,name=renew_with_usage,json=renewWithUsage,def=0" json:"renew_with_usage,omitempty"`
	// Indicates to client that license renewal and release requests ought to
	// include ClientIdentification (client_id).
	AlwaysIncludeClientId *bool `protobuf:"varint,12,opt,name=always_include_client_id,json=alwaysIncludeClientId,def=0" json:"always_include_client_id,omitempty"`
	// Duration of grace period before playback_duration_seconds (short window)
	// goes into effect. Optional.
	PlayStartGracePeriodSeconds *int64 `protobuf:"varint,13,opt,name=play_start_grace_period_seconds,json=playStartGracePeriodSeconds,def=0" json:"play_start_grace_period_seconds,omitempty"`
	// Enables "soft enforcement" of playback_duration_seconds, letting the user
	// finish playback even if short window expires. Optional.
	SoftEnforcePlaybackDuration *bool `protobuf:"varint,14,opt,name=soft_enforce_playback_duration,json=softEnforcePlaybackDuration,def=0" json:"soft_enforce_playback_duration,omitempty"`
	// Enables "soft enforcement" of rental_duration_seconds. Initial playback
	// must always start before rental duration expires.  In order to allow
	// subsequent playbacks to start after the rental duration expires,
	// soft_enforce_playback_duration must be true. Otherwise, subsequent
	// playbacks will not be allowed once rental duration expires. Optional.
	SoftEnforceRentalDuration *bool `protobuf:"varint,15,opt,name=soft_enforce_rental_duration,json=softEnforceRentalDuration,def=1" json:"soft_enforce_rental_duration,omitempty"`
}

// Default values for License_Policy fields.
const (
	Default_License_Policy_CanPlay                        = bool(false)
	Default_License_Policy_CanPersist                     = bool(false)
	Default_License_Policy_CanRenew                       = bool(false)
	Default_License_Policy_RentalDurationSeconds          = int64(0)
	Default_License_Policy_PlaybackDurationSeconds        = int64(0)
	Default_License_Policy_LicenseDurationSeconds         = int64(0)
	Default_License_Policy_RenewalRecoveryDurationSeconds = int64(0)
	Default_License_Policy_RenewalDelaySeconds            = int64(0)
	Default_License_Policy_RenewalRetryIntervalSeconds    = int64(0)
	Default_License_Policy_RenewWithUsage                 = bool(false)
	Default_License_Policy_AlwaysIncludeClientId          = bool(false)
	Default_License_Policy_PlayStartGracePeriodSeconds    = int64(0)
	Default_License_Policy_SoftEnforcePlaybackDuration    = bool(false)
	Default_License_Policy_SoftEnforceRentalDuration      = bool(true)
)

func (x *License_Policy) Reset() {
	*x = License_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_Policy) ProtoMessage() {}

func (x *License_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_Policy.ProtoReflect.Descriptor instead.
func (*License_Policy) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 0}
}

func (x *License_Policy) GetCanPlay() bool {
	if x != nil && x.CanPlay != nil {
		return *x.CanPlay
	}
	return Default_License_Policy_CanPlay
}

func (x *License_Policy) GetCanPersist() bool {
	if x != nil && x.CanPersist != nil {
		return *x.CanPersist
	}
	return Default_License_Policy_CanPersist
}

func (x *License_Policy) GetCanRenew() bool {
	if x != nil && x.CanRenew != nil {
		return *x.CanRenew
	}
	return Default_License_Policy_CanRenew
}

func (x *License_Policy) GetRentalDurationSeconds() int64 {
	if x != nil && x.RentalDurationSeconds != nil {
		return *x.RentalDurationSeconds
	}
	return Default_License_Policy_RentalDurationSeconds
}

func (x *License_Policy) GetPlaybackDurationSeconds() int64 {
	if x != nil && x.PlaybackDurationSeconds != nil {
		return *x.PlaybackDurationSeconds
	}
	return Default_License_Policy_PlaybackDurationSeconds
}

func (x *License_Policy) GetLicenseDurationSeconds() int64 {
	if x != nil && x.LicenseDurationSeconds != nil {
		return *x.LicenseDurationSeconds
	}
	return Default_License_Policy_LicenseDurationSeconds
}

func (x *License_Policy) GetRenewalRecoveryDurationSeconds() int64 {
	if x != nil && x.RenewalRecoveryDurationSeconds != nil {
		return *x.RenewalRecoveryDurationSeconds
	}
	return Default_License_Policy_RenewalRecoveryDurationSeconds
}

func (x *License_Policy) GetRenewalServerUrl() string {
	if x != nil && x.RenewalServerUrl != nil {
		return *x.RenewalServerUrl
	}
	return ""
}

func (x *License_Policy) GetRenewalDelaySeconds() int64 {
	if x != nil && x.RenewalDelaySeconds != nil {
		return *x.RenewalDelaySeconds
	}
	return Default_License_Policy_RenewalDelaySeconds
}

func (x *License_Policy) GetRenewalRetryIntervalSeconds() int64 {
	if x != nil && x.RenewalRetryIntervalSeconds != nil {
		return *x.RenewalRetryIntervalSeconds
	}
	return Default_License_Policy_RenewalRetryIntervalSeconds
}

func (x *License_Policy) GetRenewWithUsage() bool {
	if x != nil && x.RenewWithUsage != nil {
		return *x.RenewWithUsage
	}
	return Default_License_Policy_RenewWithUsage
}

func (x *License_Policy) GetAlwaysIncludeClientId() bool {
	if x != nil && x.AlwaysIncludeClientId != nil {
		return *x.AlwaysIncludeClientId
	}
	return Default_License_Policy_AlwaysIncludeClientId
}

func (x *License_Policy) GetPlayStartGracePeriodSeconds() int64 {
	if x != nil && x.PlayStartGracePeriodSeconds != nil {
		return *x.PlayStartGracePeriodSeconds
	}
	return Default_License_Policy_PlayStartGracePeriodSeconds
}

func (x *License_Policy) GetSoftEnforcePlaybackDuration() bool {
	if x != nil && x.SoftEnforcePlaybackDuration != nil {
		return *x.SoftEnforcePlaybackDuration
	}
	return Default_License_Policy_SoftEnforcePlaybackDuration
}

func (x *License_Policy) GetSoftEnforceRentalDuration() bool {
	if x != nil && x.SoftEnforceRentalDuration != nil {
		return *x.SoftEnforceRentalDuration
	}
	return Default_License_Policy_SoftEnforceRentalDuration
}

type License_KeyContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 []byte                                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Iv                 []byte                                 `protobuf:"bytes,2,opt,name=iv" json:"iv,omitempty"`
	Key                []byte                                 `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Type               *License_KeyContainer_KeyType          `protobuf:"varint,4,opt,name=type,enum=license.License_KeyContainer_KeyType" json:"type,omitempty"`
	Level              *License_KeyContainer_SecurityLevel    `protobuf:"varint,5,opt,name=level,enum=license.License_KeyContainer_SecurityLevel,def=1" json:"level,omitempty"`
	RequiredProtection *License_KeyContainer_OutputProtection `protobuf:"bytes,6,opt,name=required_protection,json=requiredProtection" json:"required_protection,omitempty"`
	// NOTE: Use of requested_protection is not recommended as it is only
	// supported on a small number of platforms.
	RequestedProtection           *License_KeyContainer_OutputProtection              `protobuf:"bytes,7,opt,name=requested_protection,json=requestedProtection" json:"requested_protection,omitempty"`
	KeyControl                    *License_KeyContainer_KeyControl                    `protobuf:"bytes,8,opt,name=key_control,json=keyControl" json:"key_control,omitempty"`
	OperatorSessionKeyPermissions *License_KeyContainer_OperatorSessionKeyPermissions `protobuf:"bytes,9,opt,name=operator_session_key_permissions,json=operatorSessionKeyPermissions" json:"operator_session_key_permissions,omitempty"`
	// Optional video resolution constraints. If the video resolution of the
	// content being decrypted/decoded falls within one of the specified ranges,
	// the optional required_protections may be applied. Otherwise an error will
	// be reported.
	// NOTE: Use of this feature is not recommended, as it is only supported on
	// a small number of platforms.
	VideoResolutionConstraints []*License_KeyContainer_VideoResolutionConstraint `protobuf:"bytes,10,rep,name=video_resolution_constraints,json=videoResolutionConstraints" json:"video_resolution_constraints,omitempty"`
	// Optional flag to indicate the key must only be used if the client
	// supports anti rollback of the user table.  Content provider can query the
	// client capabilities to determine if the client support this feature.
	AntiRollbackUsageTable *bool `protobuf:"varint,11,opt,name=anti_rollback_usage_table,json=antiRollbackUsageTable,def=0" json:"anti_rollback_usage_table,omitempty"`
	// Optional not limited to commonly known track types such as SD, HD.
	// It can be some provider defined label to identify the track.
	TrackLabel *string `protobuf:"bytes,12,opt,name=track_label,json=trackLabel" json:"track_label,omitempty"`
}

// Default values for License_KeyContainer fields.
const (
	Default_License_KeyContainer_Level                  = License_KeyContainer_SW_SECURE_CRYPTO
	Default_License_KeyContainer_AntiRollbackUsageTable = bool(false)
)

func (x *License_KeyContainer) Reset() {
	*x = License_KeyContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_KeyContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_KeyContainer) ProtoMessage() {}

func (x *License_KeyContainer) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_KeyContainer.ProtoReflect.Descriptor instead.
func (*License_KeyContainer) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1}
}

func (x *License_KeyContainer) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *License_KeyContainer) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *License_KeyContainer) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *License_KeyContainer) GetType() License_KeyContainer_KeyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return License_KeyContainer_SIGNING
}

func (x *License_KeyContainer) GetLevel() License_KeyContainer_SecurityLevel {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_License_KeyContainer_Level
}

func (x *License_KeyContainer) GetRequiredProtection() *License_KeyContainer_OutputProtection {
	if x != nil {
		return x.RequiredProtection
	}
	return nil
}

func (x *License_KeyContainer) GetRequestedProtection() *License_KeyContainer_OutputProtection {
	if x != nil {
		return x.RequestedProtection
	}
	return nil
}

func (x *License_KeyContainer) GetKeyControl() *License_KeyContainer_KeyControl {
	if x != nil {
		return x.KeyControl
	}
	return nil
}

func (x *License_KeyContainer) GetOperatorSessionKeyPermissions() *License_KeyContainer_OperatorSessionKeyPermissions {
	if x != nil {
		return x.OperatorSessionKeyPermissions
	}
	return nil
}

func (x *License_KeyContainer) GetVideoResolutionConstraints() []*License_KeyContainer_VideoResolutionConstraint {
	if x != nil {
		return x.VideoResolutionConstraints
	}
	return nil
}

func (x *License_KeyContainer) GetAntiRollbackUsageTable() bool {
	if x != nil && x.AntiRollbackUsageTable != nil {
		return *x.AntiRollbackUsageTable
	}
	return Default_License_KeyContainer_AntiRollbackUsageTable
}

func (x *License_KeyContainer) GetTrackLabel() string {
	if x != nil && x.TrackLabel != nil {
		return *x.TrackLabel
	}
	return ""
}

type License_KeyContainer_KeyControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// |key_control| is documented in:
	// Widevine Modular DRM Security Integration Guide for CENC
	// If present, the key control must be communicated to the secure
	// environment prior to any usage. This message is automatically generated
	// by the Widevine License Server SDK.
	KeyControlBlock []byte `protobuf:"bytes,1,opt,name=key_control_block,json=keyControlBlock" json:"key_control_block,omitempty"`
	Iv              []byte `protobuf:"bytes,2,opt,name=iv" json:"iv,omitempty"`
}

func (x *License_KeyContainer_KeyControl) Reset() {
	*x = License_KeyContainer_KeyControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_KeyContainer_KeyControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_KeyContainer_KeyControl) ProtoMessage() {}

func (x *License_KeyContainer_KeyControl) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_KeyContainer_KeyControl.ProtoReflect.Descriptor instead.
func (*License_KeyContainer_KeyControl) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *License_KeyContainer_KeyControl) GetKeyControlBlock() []byte {
	if x != nil {
		return x.KeyControlBlock
	}
	return nil
}

func (x *License_KeyContainer_KeyControl) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

type License_KeyContainer_OutputProtection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdcp        *License_KeyContainer_OutputProtection_HDCP        `protobuf:"varint,1,opt,name=hdcp,enum=license.License_KeyContainer_OutputProtection_HDCP,def=0" json:"hdcp,omitempty"`
	CgmsFlags   *License_KeyContainer_OutputProtection_CGMS        `protobuf:"varint,2,opt,name=cgms_flags,json=cgmsFlags,enum=license.License_KeyContainer_OutputProtection_CGMS,def=42" json:"cgms_flags,omitempty"`
	HdcpSrmRule *License_KeyContainer_OutputProtection_HdcpSrmRule `protobuf:"varint,3,opt,name=hdcp_srm_rule,json=hdcpSrmRule,enum=license.License_KeyContainer_OutputProtection_HdcpSrmRule,def=0" json:"hdcp_srm_rule,omitempty"`
	// Optional requirement to indicate analog output is not allowed.
	DisableAnalogOutput *bool `protobuf:"varint,4,opt,name=disable_analog_output,json=disableAnalogOutput,def=0" json:"disable_analog_output,omitempty"`
	// Optional requirement to indicate digital output is not allowed.
	DisableDigitalOutput *bool `protobuf:"varint,5,opt,name=disable_digital_output,json=disableDigitalOutput,def=0" json:"disable_digital_output,omitempty"`
}

// Default values for License_KeyContainer_OutputProtection fields.
const (
	Default_License_KeyContainer_OutputProtection_Hdcp                 = License_KeyContainer_OutputProtection_HDCP_NONE
	Default_License_KeyContainer_OutputProtection_CgmsFlags            = License_KeyContainer_OutputProtection_CGMS_NONE
	Default_License_KeyContainer_OutputProtection_HdcpSrmRule          = License_KeyContainer_OutputProtection_HDCP_SRM_RULE_NONE
	Default_License_KeyContainer_OutputProtection_DisableAnalogOutput  = bool(false)
	Default_License_KeyContainer_OutputProtection_DisableDigitalOutput = bool(false)
)

func (x *License_KeyContainer_OutputProtection) Reset() {
	*x = License_KeyContainer_OutputProtection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_KeyContainer_OutputProtection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_KeyContainer_OutputProtection) ProtoMessage() {}

func (x *License_KeyContainer_OutputProtection) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_KeyContainer_OutputProtection.ProtoReflect.Descriptor instead.
func (*License_KeyContainer_OutputProtection) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *License_KeyContainer_OutputProtection) GetHdcp() License_KeyContainer_OutputProtection_HDCP {
	if x != nil && x.Hdcp != nil {
		return *x.Hdcp
	}
	return Default_License_KeyContainer_OutputProtection_Hdcp
}

func (x *License_KeyContainer_OutputProtection) GetCgmsFlags() License_KeyContainer_OutputProtection_CGMS {
	if x != nil && x.CgmsFlags != nil {
		return *x.CgmsFlags
	}
	return Default_License_KeyContainer_OutputProtection_CgmsFlags
}

func (x *License_KeyContainer_OutputProtection) GetHdcpSrmRule() License_KeyContainer_OutputProtection_HdcpSrmRule {
	if x != nil && x.HdcpSrmRule != nil {
		return *x.HdcpSrmRule
	}
	return Default_License_KeyContainer_OutputProtection_HdcpSrmRule
}

func (x *License_KeyContainer_OutputProtection) GetDisableAnalogOutput() bool {
	if x != nil && x.DisableAnalogOutput != nil {
		return *x.DisableAnalogOutput
	}
	return Default_License_KeyContainer_OutputProtection_DisableAnalogOutput
}

func (x *License_KeyContainer_OutputProtection) GetDisableDigitalOutput() bool {
	if x != nil && x.DisableDigitalOutput != nil {
		return *x.DisableDigitalOutput
	}
	return Default_License_KeyContainer_OutputProtection_DisableDigitalOutput
}

type License_KeyContainer_VideoResolutionConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum and maximum video resolutions in the range (height x width).
	MinResolutionPixels *uint32 `protobuf:"varint,1,opt,name=min_resolution_pixels,json=minResolutionPixels" json:"min_resolution_pixels,omitempty"`
	MaxResolutionPixels *uint32 `protobuf:"varint,2,opt,name=max_resolution_pixels,json=maxResolutionPixels" json:"max_resolution_pixels,omitempty"`
	// Optional output protection requirements for this range. If not
	// specified, the OutputProtection in the KeyContainer applies.
	RequiredProtection *License_KeyContainer_OutputProtection `protobuf:"bytes,3,opt,name=required_protection,json=requiredProtection" json:"required_protection,omitempty"`
}

func (x *License_KeyContainer_VideoResolutionConstraint) Reset() {
	*x = License_KeyContainer_VideoResolutionConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_KeyContainer_VideoResolutionConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_KeyContainer_VideoResolutionConstraint) ProtoMessage() {}

func (x *License_KeyContainer_VideoResolutionConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_KeyContainer_VideoResolutionConstraint.ProtoReflect.Descriptor instead.
func (*License_KeyContainer_VideoResolutionConstraint) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1, 2}
}

func (x *License_KeyContainer_VideoResolutionConstraint) GetMinResolutionPixels() uint32 {
	if x != nil && x.MinResolutionPixels != nil {
		return *x.MinResolutionPixels
	}
	return 0
}

func (x *License_KeyContainer_VideoResolutionConstraint) GetMaxResolutionPixels() uint32 {
	if x != nil && x.MaxResolutionPixels != nil {
		return *x.MaxResolutionPixels
	}
	return 0
}

func (x *License_KeyContainer_VideoResolutionConstraint) GetRequiredProtection() *License_KeyContainer_OutputProtection {
	if x != nil {
		return x.RequiredProtection
	}
	return nil
}

type License_KeyContainer_OperatorSessionKeyPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permissions/key usage flags for operator service keys
	// (type = OPERATOR_SESSION).
	AllowEncrypt         *bool `protobuf:"varint,1,opt,name=allow_encrypt,json=allowEncrypt,def=0" json:"allow_encrypt,omitempty"`
	AllowDecrypt         *bool `protobuf:"varint,2,opt,name=allow_decrypt,json=allowDecrypt,def=0" json:"allow_decrypt,omitempty"`
	AllowSign            *bool `protobuf:"varint,3,opt,name=allow_sign,json=allowSign,def=0" json:"allow_sign,omitempty"`
	AllowSignatureVerify *bool `protobuf:"varint,4,opt,name=allow_signature_verify,json=allowSignatureVerify,def=0" json:"allow_signature_verify,omitempty"`
}

// Default values for License_KeyContainer_OperatorSessionKeyPermissions fields.
const (
	Default_License_KeyContainer_OperatorSessionKeyPermissions_AllowEncrypt         = bool(false)
	Default_License_KeyContainer_OperatorSessionKeyPermissions_AllowDecrypt         = bool(false)
	Default_License_KeyContainer_OperatorSessionKeyPermissions_AllowSign            = bool(false)
	Default_License_KeyContainer_OperatorSessionKeyPermissions_AllowSignatureVerify = bool(false)
)

func (x *License_KeyContainer_OperatorSessionKeyPermissions) Reset() {
	*x = License_KeyContainer_OperatorSessionKeyPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License_KeyContainer_OperatorSessionKeyPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License_KeyContainer_OperatorSessionKeyPermissions) ProtoMessage() {}

func (x *License_KeyContainer_OperatorSessionKeyPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License_KeyContainer_OperatorSessionKeyPermissions.ProtoReflect.Descriptor instead.
func (*License_KeyContainer_OperatorSessionKeyPermissions) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{1, 1, 3}
}

func (x *License_KeyContainer_OperatorSessionKeyPermissions) GetAllowEncrypt() bool {
	if x != nil && x.AllowEncrypt != nil {
		return *x.AllowEncrypt
	}
	return Default_License_KeyContainer_OperatorSessionKeyPermissions_AllowEncrypt
}

func (x *License_KeyContainer_OperatorSessionKeyPermissions) GetAllowDecrypt() bool {
	if x != nil && x.AllowDecrypt != nil {
		return *x.AllowDecrypt
	}
	return Default_License_KeyContainer_OperatorSessionKeyPermissions_AllowDecrypt
}

func (x *License_KeyContainer_OperatorSessionKeyPermissions) GetAllowSign() bool {
	if x != nil && x.AllowSign != nil {
		return *x.AllowSign
	}
	return Default_License_KeyContainer_OperatorSessionKeyPermissions_AllowSign
}

func (x *License_KeyContainer_OperatorSessionKeyPermissions) GetAllowSignatureVerify() bool {
	if x != nil && x.AllowSignatureVerify != nil {
		return *x.AllowSignatureVerify
	}
	return Default_License_KeyContainer_OperatorSessionKeyPermissions_AllowSignatureVerify
}

type LicenseRequest_ContentIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ContentIdVariant:
	//
	//	*LicenseRequest_ContentIdentification_WidevinePsshData_
	//	*LicenseRequest_ContentIdentification_WebmKeyId_
	//	*LicenseRequest_ContentIdentification_ExistingLicense_
	//	*LicenseRequest_ContentIdentification_InitData_
	ContentIdVariant isLicenseRequest_ContentIdentification_ContentIdVariant `protobuf_oneof:"content_id_variant"`
}

func (x *LicenseRequest_ContentIdentification) Reset() {
	*x = LicenseRequest_ContentIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseRequest_ContentIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseRequest_ContentIdentification) ProtoMessage() {}

func (x *LicenseRequest_ContentIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseRequest_ContentIdentification.ProtoReflect.Descriptor instead.
func (*LicenseRequest_ContentIdentification) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2, 0}
}

func (m *LicenseRequest_ContentIdentification) GetContentIdVariant() isLicenseRequest_ContentIdentification_ContentIdVariant {
	if m != nil {
		return m.ContentIdVariant
	}
	return nil
}

func (x *LicenseRequest_ContentIdentification) GetWidevinePsshData() *LicenseRequest_ContentIdentification_WidevinePsshData {
	if x, ok := x.GetContentIdVariant().(*LicenseRequest_ContentIdentification_WidevinePsshData_); ok {
		return x.WidevinePsshData
	}
	return nil
}

func (x *LicenseRequest_ContentIdentification) GetWebmKeyId() *LicenseRequest_ContentIdentification_WebmKeyId {
	if x, ok := x.GetContentIdVariant().(*LicenseRequest_ContentIdentification_WebmKeyId_); ok {
		return x.WebmKeyId
	}
	return nil
}

func (x *LicenseRequest_ContentIdentification) GetExistingLicense() *LicenseRequest_ContentIdentification_ExistingLicense {
	if x, ok := x.GetContentIdVariant().(*LicenseRequest_ContentIdentification_ExistingLicense_); ok {
		return x.ExistingLicense
	}
	return nil
}

func (x *LicenseRequest_ContentIdentification) GetInitData() *LicenseRequest_ContentIdentification_InitData {
	if x, ok := x.GetContentIdVariant().(*LicenseRequest_ContentIdentification_InitData_); ok {
		return x.InitData
	}
	return nil
}

type isLicenseRequest_ContentIdentification_ContentIdVariant interface {
	isLicenseRequest_ContentIdentification_ContentIdVariant()
}

type LicenseRequest_ContentIdentification_WidevinePsshData_ struct {
	// Exactly one of these must be present.
	WidevinePsshData *LicenseRequest_ContentIdentification_WidevinePsshData `protobuf:"bytes,1,opt,name=widevine_pssh_data,json=widevinePsshData,oneof"`
}

type LicenseRequest_ContentIdentification_WebmKeyId_ struct {
	WebmKeyId *LicenseRequest_ContentIdentification_WebmKeyId `protobuf:"bytes,2,opt,name=webm_key_id,json=webmKeyId,oneof"`
}

type LicenseRequest_ContentIdentification_ExistingLicense_ struct {
	ExistingLicense *LicenseRequest_ContentIdentification_ExistingLicense `protobuf:"bytes,3,opt,name=existing_license,json=existingLicense,oneof"`
}

type LicenseRequest_ContentIdentification_InitData_ struct {
	InitData *LicenseRequest_ContentIdentification_InitData `protobuf:"bytes,4,opt,name=init_data,json=initData,oneof"`
}

func (*LicenseRequest_ContentIdentification_WidevinePsshData_) isLicenseRequest_ContentIdentification_ContentIdVariant() {
}

func (*LicenseRequest_ContentIdentification_WebmKeyId_) isLicenseRequest_ContentIdentification_ContentIdVariant() {
}

func (*LicenseRequest_ContentIdentification_ExistingLicense_) isLicenseRequest_ContentIdentification_ContentIdVariant() {
}

func (*LicenseRequest_ContentIdentification_InitData_) isLicenseRequest_ContentIdentification_ContentIdVariant() {
}

type LicenseRequest_ContentIdentification_WidevinePsshData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PsshData    [][]byte     `protobuf:"bytes,1,rep,name=pssh_data,json=psshData" json:"pssh_data,omitempty"`
	LicenseType *LicenseType `protobuf:"varint,2,opt,name=license_type,json=licenseType,enum=license.LicenseType" json:"license_type,omitempty"`
	RequestId   []byte       `protobuf:"bytes,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"` // Opaque, client-specified.
}

func (x *LicenseRequest_ContentIdentification_WidevinePsshData) Reset() {
	*x = LicenseRequest_ContentIdentification_WidevinePsshData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseRequest_ContentIdentification_WidevinePsshData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseRequest_ContentIdentification_WidevinePsshData) ProtoMessage() {}

func (x *LicenseRequest_ContentIdentification_WidevinePsshData) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseRequest_ContentIdentification_WidevinePsshData.ProtoReflect.Descriptor instead.
func (*LicenseRequest_ContentIdentification_WidevinePsshData) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *LicenseRequest_ContentIdentification_WidevinePsshData) GetPsshData() [][]byte {
	if x != nil {
		return x.PsshData
	}
	return nil
}

func (x *LicenseRequest_ContentIdentification_WidevinePsshData) GetLicenseType() LicenseType {
	if x != nil && x.LicenseType != nil {
		return *x.LicenseType
	}
	return LicenseType_STREAMING
}

func (x *LicenseRequest_ContentIdentification_WidevinePsshData) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

type LicenseRequest_ContentIdentification_WebmKeyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      []byte       `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	LicenseType *LicenseType `protobuf:"varint,2,opt,name=license_type,json=licenseType,enum=license.LicenseType" json:"license_type,omitempty"`
	RequestId   []byte       `protobuf:"bytes,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"` // Opaque, client-specified.
}

func (x *LicenseRequest_ContentIdentification_WebmKeyId) Reset() {
	*x = LicenseRequest_ContentIdentification_WebmKeyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseRequest_ContentIdentification_WebmKeyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseRequest_ContentIdentification_WebmKeyId) ProtoMessage() {}

func (x *LicenseRequest_ContentIdentification_WebmKeyId) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseRequest_ContentIdentification_WebmKeyId.ProtoReflect.Descriptor instead.
func (*LicenseRequest_ContentIdentification_WebmKeyId) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *LicenseRequest_ContentIdentification_WebmKeyId) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LicenseRequest_ContentIdentification_WebmKeyId) GetLicenseType() LicenseType {
	if x != nil && x.LicenseType != nil {
		return *x.LicenseType
	}
	return LicenseType_STREAMING
}

func (x *LicenseRequest_ContentIdentification_WebmKeyId) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

type LicenseRequest_ContentIdentification_ExistingLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseId              *LicenseIdentification `protobuf:"bytes,1,opt,name=license_id,json=licenseId" json:"license_id,omitempty"`
	SecondsSinceStarted    *int64                 `protobuf:"varint,2,opt,name=seconds_since_started,json=secondsSinceStarted" json:"seconds_since_started,omitempty"`
	SecondsSinceLastPlayed *int64                 `protobuf:"varint,3,opt,name=seconds_since_last_played,json=secondsSinceLastPlayed" json:"seconds_since_last_played,omitempty"`
	SessionUsageTableEntry []byte                 `protobuf:"bytes,4,opt,name=session_usage_table_entry,json=sessionUsageTableEntry" json:"session_usage_table_entry,omitempty"`
}

func (x *LicenseRequest_ContentIdentification_ExistingLicense) Reset() {
	*x = LicenseRequest_ContentIdentification_ExistingLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseRequest_ContentIdentification_ExistingLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseRequest_ContentIdentification_ExistingLicense) ProtoMessage() {}

func (x *LicenseRequest_ContentIdentification_ExistingLicense) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseRequest_ContentIdentification_ExistingLicense.ProtoReflect.Descriptor instead.
func (*LicenseRequest_ContentIdentification_ExistingLicense) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2, 0, 2}
}

func (x *LicenseRequest_ContentIdentification_ExistingLicense) GetLicenseId() *LicenseIdentification {
	if x != nil {
		return x.LicenseId
	}
	return nil
}

func (x *LicenseRequest_ContentIdentification_ExistingLicense) GetSecondsSinceStarted() int64 {
	if x != nil && x.SecondsSinceStarted != nil {
		return *x.SecondsSinceStarted
	}
	return 0
}

func (x *LicenseRequest_ContentIdentification_ExistingLicense) GetSecondsSinceLastPlayed() int64 {
	if x != nil && x.SecondsSinceLastPlayed != nil {
		return *x.SecondsSinceLastPlayed
	}
	return 0
}

func (x *LicenseRequest_ContentIdentification_ExistingLicense) GetSessionUsageTableEntry() []byte {
	if x != nil {
		return x.SessionUsageTableEntry
	}
	return nil
}

type LicenseRequest_ContentIdentification_InitData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitDataType *LicenseRequest_ContentIdentification_InitData_InitDataType `protobuf:"varint,1,opt,name=init_data_type,json=initDataType,enum=license.LicenseRequest_ContentIdentification_InitData_InitDataType,def=1" json:"init_data_type,omitempty"`
	InitData     []byte                                                      `protobuf:"bytes,2,opt,name=init_data,json=initData" json:"init_data,omitempty"`
	LicenseType  *LicenseType                                                `protobuf:"varint,3,opt,name=license_type,json=licenseType,enum=license.LicenseType" json:"license_type,omitempty"`
	RequestId    []byte                                                      `protobuf:"bytes,4,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
}

// Default values for LicenseRequest_ContentIdentification_InitData fields.
const (
	Default_LicenseRequest_ContentIdentification_InitData_InitDataType = LicenseRequest_ContentIdentification_InitData_CENC
)

func (x *LicenseRequest_ContentIdentification_InitData) Reset() {
	*x = LicenseRequest_ContentIdentification_InitData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseRequest_ContentIdentification_InitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseRequest_ContentIdentification_InitData) ProtoMessage() {}

func (x *LicenseRequest_ContentIdentification_InitData) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseRequest_ContentIdentification_InitData.ProtoReflect.Descriptor instead.
func (*LicenseRequest_ContentIdentification_InitData) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{2, 0, 3}
}

func (x *LicenseRequest_ContentIdentification_InitData) GetInitDataType() LicenseRequest_ContentIdentification_InitData_InitDataType {
	if x != nil && x.InitDataType != nil {
		return *x.InitDataType
	}
	return Default_LicenseRequest_ContentIdentification_InitData_InitDataType
}

func (x *LicenseRequest_ContentIdentification_InitData) GetInitData() []byte {
	if x != nil {
		return x.InitData
	}
	return nil
}

func (x *LicenseRequest_ContentIdentification_InitData) GetLicenseType() LicenseType {
	if x != nil && x.LicenseType != nil {
		return *x.LicenseType
	}
	return LicenseType_STREAMING
}

func (x *LicenseRequest_ContentIdentification_InitData) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

type MetricData_TypeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *MetricData_MetricType `protobuf:"varint,1,opt,name=type,enum=license.MetricData_MetricType" json:"type,omitempty"`
	// The value associated with 'type'.  For example if type == LATENCY, the
	// value would be the time in microseconds spent in this 'stage'.
	Value *int64 `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
}

// Default values for MetricData_TypeValue fields.
const (
	Default_MetricData_TypeValue_Value = int64(0)
)

func (x *MetricData_TypeValue) Reset() {
	*x = MetricData_TypeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricData_TypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricData_TypeValue) ProtoMessage() {}

func (x *MetricData_TypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricData_TypeValue.ProtoReflect.Descriptor instead.
func (*MetricData_TypeValue) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{3, 0}
}

func (x *MetricData_TypeValue) GetType() MetricData_MetricType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MetricData_LATENCY
}

func (x *MetricData_TypeValue) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_MetricData_TypeValue_Value
}

type ClientIdentification_NameValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *ClientIdentification_NameValue) Reset() {
	*x = ClientIdentification_NameValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientIdentification_NameValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientIdentification_NameValue) ProtoMessage() {}

func (x *ClientIdentification_NameValue) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientIdentification_NameValue.ProtoReflect.Descriptor instead.
func (*ClientIdentification_NameValue) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ClientIdentification_NameValue) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClientIdentification_NameValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Capabilities which not all clients may support. Used for the license
// exchange protocol only.
type ClientIdentification_ClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientToken                *bool                                                `protobuf:"varint,1,opt,name=client_token,json=clientToken,def=0" json:"client_token,omitempty"`
	SessionToken               *bool                                                `protobuf:"varint,2,opt,name=session_token,json=sessionToken,def=0" json:"session_token,omitempty"`
	VideoResolutionConstraints *bool                                                `protobuf:"varint,3,opt,name=video_resolution_constraints,json=videoResolutionConstraints,def=0" json:"video_resolution_constraints,omitempty"`
	MaxHdcpVersion             *ClientIdentification_ClientCapabilities_HdcpVersion `protobuf:"varint,4,opt,name=max_hdcp_version,json=maxHdcpVersion,enum=license.ClientIdentification_ClientCapabilities_HdcpVersion,def=0" json:"max_hdcp_version,omitempty"`
	OemCryptoApiVersion        *uint32                                              `protobuf:"varint,5,opt,name=oem_crypto_api_version,json=oemCryptoApiVersion" json:"oem_crypto_api_version,omitempty"`
	// Client has hardware support for protecting the usage table, such as
	// storing the generation number in secure memory.  For Details, see:
	// Widevine Modular DRM Security Integration Guide for CENC
	AntiRollbackUsageTable *bool `protobuf:"varint,6,opt,name=anti_rollback_usage_table,json=antiRollbackUsageTable,def=0" json:"anti_rollback_usage_table,omitempty"`
	// The client shall report |srm_version| if available.
	SrmVersion *uint32 `protobuf:"varint,7,opt,name=srm_version,json=srmVersion" json:"srm_version,omitempty"`
	// A device may have SRM data, and report a version, but may not be capable
	// of updating SRM data.
	CanUpdateSrm                *bool                                                             `protobuf:"varint,8,opt,name=can_update_srm,json=canUpdateSrm,def=0" json:"can_update_srm,omitempty"`
	SupportedCertificateKeyType []ClientIdentification_ClientCapabilities_CertificateKeyType      `protobuf:"varint,9,rep,name=supported_certificate_key_type,json=supportedCertificateKeyType,enum=license.ClientIdentification_ClientCapabilities_CertificateKeyType" json:"supported_certificate_key_type,omitempty"`
	AnalogOutputCapabilities    *ClientIdentification_ClientCapabilities_AnalogOutputCapabilities `protobuf:"varint,10,opt,name=analog_output_capabilities,json=analogOutputCapabilities,enum=license.ClientIdentification_ClientCapabilities_AnalogOutputCapabilities,def=0" json:"analog_output_capabilities,omitempty"`
	CanDisableAnalogOutput      *bool                                                             `protobuf:"varint,11,opt,name=can_disable_analog_output,json=canDisableAnalogOutput,def=0" json:"can_disable_analog_output,omitempty"`
	// Clients can indicate a performance level supported by OEMCrypto.
	// This will allow applications and providers to choose an appropriate
	// quality of content to serve. Currently defined tiers are
	// 1 (low), 2 (medium) and 3 (high). Any other value indicates that
	// the resource rating is unavailable or reporting erroneous values
	// for that device. For details see,
	// Widevine Modular DRM Security Integration Guide for CENC
	ResourceRatingTier *uint32 `protobuf:"varint,12,opt,name=resource_rating_tier,json=resourceRatingTier,def=0" json:"resource_rating_tier,omitempty"`
}

// Default values for ClientIdentification_ClientCapabilities fields.
const (
	Default_ClientIdentification_ClientCapabilities_ClientToken                = bool(false)
	Default_ClientIdentification_ClientCapabilities_SessionToken               = bool(false)
	Default_ClientIdentification_ClientCapabilities_VideoResolutionConstraints = bool(false)
	Default_ClientIdentification_ClientCapabilities_MaxHdcpVersion             = ClientIdentification_ClientCapabilities_HDCP_NONE
	Default_ClientIdentification_ClientCapabilities_AntiRollbackUsageTable     = bool(false)
	Default_ClientIdentification_ClientCapabilities_CanUpdateSrm               = bool(false)
	Default_ClientIdentification_ClientCapabilities_AnalogOutputCapabilities   = ClientIdentification_ClientCapabilities_ANALOG_OUTPUT_UNKNOWN
	Default_ClientIdentification_ClientCapabilities_CanDisableAnalogOutput     = bool(false)
	Default_ClientIdentification_ClientCapabilities_ResourceRatingTier         = uint32(0)
)

func (x *ClientIdentification_ClientCapabilities) Reset() {
	*x = ClientIdentification_ClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientIdentification_ClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientIdentification_ClientCapabilities) ProtoMessage() {}

func (x *ClientIdentification_ClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientIdentification_ClientCapabilities.ProtoReflect.Descriptor instead.
func (*ClientIdentification_ClientCapabilities) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ClientIdentification_ClientCapabilities) GetClientToken() bool {
	if x != nil && x.ClientToken != nil {
		return *x.ClientToken
	}
	return Default_ClientIdentification_ClientCapabilities_ClientToken
}

func (x *ClientIdentification_ClientCapabilities) GetSessionToken() bool {
	if x != nil && x.SessionToken != nil {
		return *x.SessionToken
	}
	return Default_ClientIdentification_ClientCapabilities_SessionToken
}

func (x *ClientIdentification_ClientCapabilities) GetVideoResolutionConstraints() bool {
	if x != nil && x.VideoResolutionConstraints != nil {
		return *x.VideoResolutionConstraints
	}
	return Default_ClientIdentification_ClientCapabilities_VideoResolutionConstraints
}

func (x *ClientIdentification_ClientCapabilities) GetMaxHdcpVersion() ClientIdentification_ClientCapabilities_HdcpVersion {
	if x != nil && x.MaxHdcpVersion != nil {
		return *x.MaxHdcpVersion
	}
	return Default_ClientIdentification_ClientCapabilities_MaxHdcpVersion
}

func (x *ClientIdentification_ClientCapabilities) GetOemCryptoApiVersion() uint32 {
	if x != nil && x.OemCryptoApiVersion != nil {
		return *x.OemCryptoApiVersion
	}
	return 0
}

func (x *ClientIdentification_ClientCapabilities) GetAntiRollbackUsageTable() bool {
	if x != nil && x.AntiRollbackUsageTable != nil {
		return *x.AntiRollbackUsageTable
	}
	return Default_ClientIdentification_ClientCapabilities_AntiRollbackUsageTable
}

func (x *ClientIdentification_ClientCapabilities) GetSrmVersion() uint32 {
	if x != nil && x.SrmVersion != nil {
		return *x.SrmVersion
	}
	return 0
}

func (x *ClientIdentification_ClientCapabilities) GetCanUpdateSrm() bool {
	if x != nil && x.CanUpdateSrm != nil {
		return *x.CanUpdateSrm
	}
	return Default_ClientIdentification_ClientCapabilities_CanUpdateSrm
}

func (x *ClientIdentification_ClientCapabilities) GetSupportedCertificateKeyType() []ClientIdentification_ClientCapabilities_CertificateKeyType {
	if x != nil {
		return x.SupportedCertificateKeyType
	}
	return nil
}

func (x *ClientIdentification_ClientCapabilities) GetAnalogOutputCapabilities() ClientIdentification_ClientCapabilities_AnalogOutputCapabilities {
	if x != nil && x.AnalogOutputCapabilities != nil {
		return *x.AnalogOutputCapabilities
	}
	return Default_ClientIdentification_ClientCapabilities_AnalogOutputCapabilities
}

func (x *ClientIdentification_ClientCapabilities) GetCanDisableAnalogOutput() bool {
	if x != nil && x.CanDisableAnalogOutput != nil {
		return *x.CanDisableAnalogOutput
	}
	return Default_ClientIdentification_ClientCapabilities_CanDisableAnalogOutput
}

func (x *ClientIdentification_ClientCapabilities) GetResourceRatingTier() uint32 {
	if x != nil && x.ResourceRatingTier != nil {
		return *x.ResourceRatingTier
	}
	return Default_ClientIdentification_ClientCapabilities_ResourceRatingTier
}

type ClientIdentification_ClientCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *ClientIdentification_TokenType `protobuf:"varint,1,opt,name=type,enum=license.ClientIdentification_TokenType,def=0" json:"type,omitempty"`
	Token []byte                          `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

// Default values for ClientIdentification_ClientCredentials fields.
const (
	Default_ClientIdentification_ClientCredentials_Type = ClientIdentification_KEYBOX
)

func (x *ClientIdentification_ClientCredentials) Reset() {
	*x = ClientIdentification_ClientCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientIdentification_ClientCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientIdentification_ClientCredentials) ProtoMessage() {}

func (x *ClientIdentification_ClientCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientIdentification_ClientCredentials.ProtoReflect.Descriptor instead.
func (*ClientIdentification_ClientCredentials) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{6, 2}
}

func (x *ClientIdentification_ClientCredentials) GetType() ClientIdentification_TokenType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ClientIdentification_ClientCredentials_Type
}

func (x *ClientIdentification_ClientCredentials) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type DrmCertificate_EncryptionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device public key. PKCS#1 ASN.1 DER-encoded. Required.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	// Required. The algorithm field contains the curve used to create the
	// |public_key| if algorithm is one of the ECC types.
	// The |algorithm| is used for both to determine the if the certificate is
	// ECC or RSA. The |algorithm| also specifies the parameters that were used
	// to create |public_key| and are used to create an ephemeral session key.
	Algorithm *DrmCertificate_Algorithm `protobuf:"varint,2,opt,name=algorithm,enum=license.DrmCertificate_Algorithm,def=1" json:"algorithm,omitempty"`
}

// Default values for DrmCertificate_EncryptionKey fields.
const (
	Default_DrmCertificate_EncryptionKey_Algorithm = DrmCertificate_RSA
)

func (x *DrmCertificate_EncryptionKey) Reset() {
	*x = DrmCertificate_EncryptionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrmCertificate_EncryptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrmCertificate_EncryptionKey) ProtoMessage() {}

func (x *DrmCertificate_EncryptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrmCertificate_EncryptionKey.ProtoReflect.Descriptor instead.
func (*DrmCertificate_EncryptionKey) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DrmCertificate_EncryptionKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *DrmCertificate_EncryptionKey) GetAlgorithm() DrmCertificate_Algorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return Default_DrmCertificate_EncryptionKey_Algorithm
}

type WidevinePsshData_EntitledKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of entitlement key used for wrapping |key|.
	EntitlementKeyId []byte `protobuf:"bytes,1,opt,name=entitlement_key_id,json=entitlementKeyId" json:"entitlement_key_id,omitempty"`
	// ID of the entitled key.
	KeyId []byte `protobuf:"bytes,2,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	// Wrapped key. Required.
	Key []byte `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// IV used for wrapping |key|. Required.
	Iv []byte `protobuf:"bytes,4,opt,name=iv" json:"iv,omitempty"`
	// Size of entitlement key used for wrapping |key|.
	EntitlementKeySizeBytes *uint32 `protobuf:"varint,5,opt,name=entitlement_key_size_bytes,json=entitlementKeySizeBytes,def=32" json:"entitlement_key_size_bytes,omitempty"`
}

// Default values for WidevinePsshData_EntitledKey fields.
const (
	Default_WidevinePsshData_EntitledKey_EntitlementKeySizeBytes = uint32(32)
)

func (x *WidevinePsshData_EntitledKey) Reset() {
	*x = WidevinePsshData_EntitledKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidevinePsshData_EntitledKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidevinePsshData_EntitledKey) ProtoMessage() {}

func (x *WidevinePsshData_EntitledKey) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidevinePsshData_EntitledKey.ProtoReflect.Descriptor instead.
func (*WidevinePsshData_EntitledKey) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{10, 0}
}

func (x *WidevinePsshData_EntitledKey) GetEntitlementKeyId() []byte {
	if x != nil {
		return x.EntitlementKeyId
	}
	return nil
}

func (x *WidevinePsshData_EntitledKey) GetKeyId() []byte {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *WidevinePsshData_EntitledKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WidevinePsshData_EntitledKey) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *WidevinePsshData_EntitledKey) GetEntitlementKeySizeBytes() uint32 {
	if x != nil && x.EntitlementKeySizeBytes != nil {
		return *x.EntitlementKeySizeBytes
	}
	return Default_WidevinePsshData_EntitledKey_EntitlementKeySizeBytes
}

type FileHashes_Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename    *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	TestSigning *bool   `protobuf:"varint,2,opt,name=test_signing,json=testSigning" json:"test_signing,omitempty"` //0 - release, 1 - testing
	SHA512Hash  []byte  `protobuf:"bytes,3,opt,name=SHA512Hash" json:"SHA512Hash,omitempty"`
	MainExe     *bool   `protobuf:"varint,4,opt,name=main_exe,json=mainExe" json:"main_exe,omitempty"` //0 for dlls, 1 for exe, this is field 3 in file
	Signature   []byte  `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
}

func (x *FileHashes_Signature) Reset() {
	*x = FileHashes_Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_license_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileHashes_Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHashes_Signature) ProtoMessage() {}

func (x *FileHashes_Signature) ProtoReflect() protoreflect.Message {
	mi := &file_license_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHashes_Signature.ProtoReflect.Descriptor instead.
func (*FileHashes_Signature) Descriptor() ([]byte, []int) {
	return file_license_proto_rawDescGZIP(), []int{11, 0}
}

func (x *FileHashes_Signature) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *FileHashes_Signature) GetTestSigning() bool {
	if x != nil && x.TestSigning != nil {
		return *x.TestSigning
	}
	return false
}

func (x *FileHashes_Signature) GetSHA512Hash() []byte {
	if x != nil {
		return x.SHA512Hash
	}
	return nil
}

func (x *FileHashes_Signature) GetMainExe() bool {
	if x != nil && x.MainExe != nil {
		return *x.MainExe
	}
	return false
}

func (x *FileHashes_Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_license_proto protoreflect.FileDescriptor

var file_license_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xba, 0x1d, 0x0a, 0x07,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x6d, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x72,
	0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x18, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x1a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x73, 0x1a, 0xf5, 0x06, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x20, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x12, 0x26, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a,
	0x63, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x63, 0x61,
	0x6e, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x39,
	0x0a, 0x17, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x01, 0x30, 0x52, 0x15, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x19, 0x70, 0x6c, 0x61,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52,
	0x17, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x18, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x16, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x21, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x3a, 0x01, 0x30, 0x52, 0x1e, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x35, 0x0a, 0x15, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x3a, 0x01, 0x30, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x3a, 0x01, 0x30, 0x52, 0x1b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2f, 0x0a, 0x10, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x18, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x1f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x1b, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x1e, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1b, 0x73, 0x6f, 0x66, 0x74, 0x45,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x19, 0x73, 0x6f, 0x66, 0x74, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe8, 0x11,
	0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x10, 0x53, 0x57, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x5f, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x61, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x84, 0x01, 0x0a, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x79, 0x0a, 0x1c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4b,
	0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x1a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x40, 0x0a, 0x19, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x61, 0x6e, 0x74,
	0x69, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x1a, 0x48, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6b,
	0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x1a, 0xa9,
	0x05, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x04, 0x68, 0x64, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x48, 0x44, 0x43, 0x50, 0x3a, 0x09, 0x48, 0x44, 0x43, 0x50, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x52, 0x04, 0x68, 0x64, 0x63, 0x70, 0x12, 0x5d, 0x0a, 0x0a, 0x63, 0x67, 0x6d, 0x73, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x47, 0x4d, 0x53,
	0x3a, 0x09, 0x43, 0x47, 0x4d, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x09, 0x63, 0x67, 0x6d,
	0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x72, 0x0a, 0x0d, 0x68, 0x64, 0x63, 0x70, 0x5f, 0x73,
	0x72, 0x6d, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x64,
	0x63, 0x70, 0x53, 0x72, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x3a, 0x12, 0x48, 0x44, 0x43, 0x50, 0x5f,
	0x53, 0x52, 0x4d, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0b, 0x68,
	0x64, 0x63, 0x70, 0x53, 0x72, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x15, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x79, 0x0a, 0x04, 0x48, 0x44, 0x43, 0x50, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x44,
	0x43, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x44, 0x43,
	0x50, 0x5f, 0x56, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x44, 0x43, 0x50, 0x5f, 0x56,
	0x32, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x44, 0x43, 0x50, 0x5f, 0x56, 0x32, 0x5f, 0x31,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x44, 0x43, 0x50, 0x5f, 0x56, 0x32, 0x5f, 0x32, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x44, 0x43, 0x50, 0x5f, 0x56, 0x32, 0x5f, 0x33, 0x10, 0x05,
	0x12, 0x1b, 0x0a, 0x16, 0x48, 0x44, 0x43, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x47, 0x49,
	0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0xff, 0x01, 0x22, 0x43, 0x0a,
	0x04, 0x43, 0x47, 0x4d, 0x53, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x47, 0x4d, 0x53, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x2a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x46, 0x52, 0x45,
	0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x4f, 0x4e, 0x43, 0x45,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x4e, 0x45, 0x56, 0x45, 0x52,
	0x10, 0x03, 0x22, 0x36, 0x0a, 0x0b, 0x48, 0x64, 0x63, 0x70, 0x53, 0x72, 0x6d, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x44, 0x43, 0x50, 0x5f, 0x53, 0x52, 0x4d, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x52, 0x4d, 0x10, 0x01, 0x1a, 0xe4, 0x01, 0x0a, 0x19, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x69, 0x78, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73,
	0x12, 0x5f, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xda, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12,
	0x2a, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x67,
	0x6e, 0x12, 0x3b, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x6c,
	0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x47,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x22, 0x7a, 0x0a, 0x0d,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x57, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x57, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x57, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x57, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x57, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x22, 0x98, 0x0e, 0x0a, 0x0e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x50, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x32, 0x5f, 0x30, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x56, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0xd6, 0x09, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x12, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x5f, 0x70,
	0x73, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69,
	0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50, 0x73, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x10, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50, 0x73, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x59, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x62, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x09, 0x77, 0x65, 0x62, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x6a, 0x0a,
	0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x87, 0x01, 0x0a, 0x10, 0x57, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50, 0x73, 0x73,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x73, 0x73, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x73, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x37, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a, 0x7b, 0x0a, 0x09, 0x57, 0x65,
	0x62, 0x6d, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a, 0xfa, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x1a, 0x94, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x6f, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x04,
	0x43, 0x45, 0x4e, 0x43, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x45, 0x4e, 0x43, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x42, 0x4d, 0x10, 0x02, 0x42, 0x14, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x22, 0x30, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4e,
	0x45, 0x57, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53,
	0x45, 0x10, 0x03, 0x22, 0xef, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x58, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x0a, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x41, 0x54,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x10, 0x02, 0x22, 0x75, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x06, 0x0a,
	0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x65, 0x6d, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x6f, 0x65, 0x6d, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x55, 0x42, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x41, 0x53, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x53, 0x5f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x0a, 0x22, 0x53, 0x0a, 0x0e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x50, 0x48, 0x45, 0x52, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x45, 0x43, 0x43, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02,
	0x22, 0xa1, 0x10, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x06, 0x4b, 0x45, 0x59, 0x42, 0x4f, 0x58, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x6d, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x76, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x12, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0x35, 0x0a, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x8c, 0x0a, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2a, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a,
	0x1c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1a, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x64,
	0x63, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x48, 0x64, 0x63, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x09,
	0x48, 0x44, 0x43, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x48, 0x64,
	0x63, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x65, 0x6d,
	0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x65, 0x6d, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x19, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x61, 0x6e, 0x74, 0x69, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0c, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x72, 0x6d, 0x12, 0x88,
	0x01, 0x0a, 0x1e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1b, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x1a, 0x61, 0x6e,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x15, 0x41, 0x4e, 0x41, 0x4c, 0x4f,
	0x47, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x52, 0x18, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x19, 0x63, 0x61,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x12, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65,
	0x72, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x48, 0x64, 0x63, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x44, 0x43, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x48, 0x44, 0x43, 0x50, 0x5f, 0x56, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x48, 0x44, 0x43, 0x50, 0x5f, 0x56, 0x32, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x44,
	0x43, 0x50, 0x5f, 0x56, 0x32, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x44, 0x43,
	0x50, 0x5f, 0x56, 0x32, 0x5f, 0x32, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x44, 0x43, 0x50,
	0x5f, 0x56, 0x32, 0x5f, 0x33, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x48, 0x44, 0x43, 0x50, 0x5f,
	0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x10, 0xff, 0x01, 0x22, 0x69, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x53,
	0x41, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x53, 0x41, 0x5f,
	0x33, 0x30, 0x37, 0x32, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x43, 0x5f, 0x53, 0x45,
	0x43, 0x50, 0x32, 0x35, 0x36, 0x52, 0x31, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x43,
	0x5f, 0x53, 0x45, 0x43, 0x50, 0x33, 0x38, 0x34, 0x52, 0x31, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x43, 0x43, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x35, 0x32, 0x31, 0x52, 0x31, 0x10, 0x04, 0x22,
	0x8d, 0x01, 0x0a, 0x18, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4e, 0x41, 0x4c, 0x4f,
	0x47, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x41, 0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x43, 0x47, 0x4d, 0x53, 0x5f, 0x41, 0x10, 0x03, 0x1a,
	0x6e, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x4b, 0x45, 0x59,
	0x42, 0x4f, 0x58, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x73, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x4b, 0x45, 0x59, 0x42, 0x4f, 0x58, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x52, 0x4d, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x45, 0x4d, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x22, 0xa4, 0x02, 0x0a, 0x1d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x76, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x49, 0x76, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x92, 0x08, 0x0a, 0x0e,
	0x44, 0x72, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x72, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x16, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x14, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x72, 0x6d, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x72, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x3a, 0x03, 0x52, 0x53, 0x41, 0x52, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x72, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x0d,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x1a, 0x74, 0x0a,
	0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x72, 0x6d, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x3a, 0x03, 0x52, 0x53, 0x41, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x4f, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10,
	0x04, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x44,
	0x4b, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x53, 0x44, 0x4b, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x44, 0x4b, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x58, 0x59, 0x5f, 0x53, 0x44, 0x4b, 0x10, 0x04, 0x22, 0x64, 0x0a, 0x09, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x53, 0x41, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x43, 0x5f, 0x53,
	0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x52, 0x31, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43,
	0x43, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x33, 0x38, 0x34, 0x52, 0x31, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x43, 0x43, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x35, 0x32, 0x31, 0x52, 0x31, 0x10, 0x04,
	0x22, 0xd8, 0x01, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x72, 0x6d, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x72, 0x6d,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x64, 0x72, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x44, 0x72, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xb4, 0x07, 0x0a, 0x10,
	0x57, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50, 0x73, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x57, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50, 0x73, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6b, 0x65, 0x79,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50,
	0x73, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50, 0x73, 0x73, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x0f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0b, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76,
	0x12, 0x3f, 0x0a, 0x1a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02, 0x33, 0x32, 0x52, 0x17, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c,
	0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x22, 0x28, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x45, 0x4e, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x45, 0x53, 0x43, 0x54, 0x52,
	0x10, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0xa3, 0x01, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x48, 0x41, 0x35, 0x31,
	0x32, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0x38,
	0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54,
	0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x03, 0x2a, 0xd9, 0x01, 0x0a, 0x1a, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x4d,
	0x50, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x05, 0x2a, 0x44, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x5f, 0x32, 0x10, 0x16, 0x2a, 0x86, 0x01, 0x0a, 0x12, 0x48,
	0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x33, 0x38,
	0x34, 0x10, 0x03, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x3b, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e,
	0x65, 0x70, 0x62,
}

var (
	file_license_proto_rawDescOnce sync.Once
	file_license_proto_rawDescData = file_license_proto_rawDesc
)

func file_license_proto_rawDescGZIP() []byte {
	file_license_proto_rawDescOnce.Do(func() {
		file_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_license_proto_rawDescData)
	})
	return file_license_proto_rawDescData
}

var file_license_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_license_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_license_proto_goTypes = []interface{}{
	(LicenseType)(0),                                                      // 0: license.LicenseType
	(PlatformVerificationStatus)(0),                                       // 1: license.PlatformVerificationStatus
	(ProtocolVersion)(0),                                                  // 2: license.ProtocolVersion
	(HashAlgorithmProto)(0),                                               // 3: license.HashAlgorithmProto
	(License_KeyContainer_KeyType)(0),                                     // 4: license.License.KeyContainer.KeyType
	(License_KeyContainer_SecurityLevel)(0),                               // 5: license.License.KeyContainer.SecurityLevel
	(License_KeyContainer_OutputProtection_HDCP)(0),                       // 6: license.License.KeyContainer.OutputProtection.HDCP
	(License_KeyContainer_OutputProtection_CGMS)(0),                       // 7: license.License.KeyContainer.OutputProtection.CGMS
	(License_KeyContainer_OutputProtection_HdcpSrmRule)(0),                // 8: license.License.KeyContainer.OutputProtection.HdcpSrmRule
	(LicenseRequest_RequestType)(0),                                       // 9: license.LicenseRequest.RequestType
	(LicenseRequest_ContentIdentification_InitData_InitDataType)(0),       // 10: license.LicenseRequest.ContentIdentification.InitData.InitDataType
	(MetricData_MetricType)(0),                                            // 11: license.MetricData.MetricType
	(SignedMessage_MessageType)(0),                                        // 12: license.SignedMessage.MessageType
	(SignedMessage_SessionKeyType)(0),                                     // 13: license.SignedMessage.SessionKeyType
	(ClientIdentification_TokenType)(0),                                   // 14: license.ClientIdentification.TokenType
	(ClientIdentification_ClientCapabilities_HdcpVersion)(0),              // 15: license.ClientIdentification.ClientCapabilities.HdcpVersion
	(ClientIdentification_ClientCapabilities_CertificateKeyType)(0),       // 16: license.ClientIdentification.ClientCapabilities.CertificateKeyType
	(ClientIdentification_ClientCapabilities_AnalogOutputCapabilities)(0), // 17: license.ClientIdentification.ClientCapabilities.AnalogOutputCapabilities
	(DrmCertificate_Type)(0),                                              // 18: license.DrmCertificate.Type
	(DrmCertificate_ServiceType)(0),                                       // 19: license.DrmCertificate.ServiceType
	(DrmCertificate_Algorithm)(0),                                         // 20: license.DrmCertificate.Algorithm
	(WidevinePsshData_Type)(0),                                            // 21: license.WidevinePsshData.Type
	(WidevinePsshData_Algorithm)(0),                                       // 22: license.WidevinePsshData.Algorithm
	(*LicenseIdentification)(nil),                                         // 23: license.LicenseIdentification
	(*License)(nil),                                                       // 24: license.License
	(*LicenseRequest)(nil),                                                // 25: license.LicenseRequest
	(*MetricData)(nil),                                                    // 26: license.MetricData
	(*VersionInfo)(nil),                                                   // 27: license.VersionInfo
	(*SignedMessage)(nil),                                                 // 28: license.SignedMessage
	(*ClientIdentification)(nil),                                          // 29: license.ClientIdentification
	(*EncryptedClientIdentification)(nil),                                 // 30: license.EncryptedClientIdentification
	(*DrmCertificate)(nil),                                                // 31: license.DrmCertificate
	(*SignedDrmCertificate)(nil),                                          // 32: license.SignedDrmCertificate
	(*WidevinePsshData)(nil),                                              // 33: license.WidevinePsshData
	(*FileHashes)(nil),                                                    // 34: license.FileHashes
	(*License_Policy)(nil),                                                // 35: license.License.Policy
	(*License_KeyContainer)(nil),                                          // 36: license.License.KeyContainer
	(*License_KeyContainer_KeyControl)(nil),                               // 37: license.License.KeyContainer.KeyControl
	(*License_KeyContainer_OutputProtection)(nil),                         // 38: license.License.KeyContainer.OutputProtection
	(*License_KeyContainer_VideoResolutionConstraint)(nil),                // 39: license.License.KeyContainer.VideoResolutionConstraint
	(*License_KeyContainer_OperatorSessionKeyPermissions)(nil),            // 40: license.License.KeyContainer.OperatorSessionKeyPermissions
	(*LicenseRequest_ContentIdentification)(nil),                          // 41: license.LicenseRequest.ContentIdentification
	(*LicenseRequest_ContentIdentification_WidevinePsshData)(nil),         // 42: license.LicenseRequest.ContentIdentification.WidevinePsshData
	(*LicenseRequest_ContentIdentification_WebmKeyId)(nil),                // 43: license.LicenseRequest.ContentIdentification.WebmKeyId
	(*LicenseRequest_ContentIdentification_ExistingLicense)(nil),          // 44: license.LicenseRequest.ContentIdentification.ExistingLicense
	(*LicenseRequest_ContentIdentification_InitData)(nil),                 // 45: license.LicenseRequest.ContentIdentification.InitData
	(*MetricData_TypeValue)(nil),                                          // 46: license.MetricData.TypeValue
	(*ClientIdentification_NameValue)(nil),                                // 47: license.ClientIdentification.NameValue
	(*ClientIdentification_ClientCapabilities)(nil),                       // 48: license.ClientIdentification.ClientCapabilities
	(*ClientIdentification_ClientCredentials)(nil),                        // 49: license.ClientIdentification.ClientCredentials
	(*DrmCertificate_EncryptionKey)(nil),                                  // 50: license.DrmCertificate.EncryptionKey
	(*WidevinePsshData_EntitledKey)(nil),                                  // 51: license.WidevinePsshData.EntitledKey
	(*FileHashes_Signature)(nil),                                          // 52: license.FileHashes.Signature
}
var file_license_proto_depIdxs = []int32{
	0,  // 0: license.LicenseIdentification.type:type_name -> license.LicenseType
	23, // 1: license.License.id:type_name -> license.LicenseIdentification
	35, // 2: license.License.policy:type_name -> license.License.Policy
	36, // 3: license.License.key:type_name -> license.License.KeyContainer
	1,  // 4: license.License.platform_verification_status:type_name -> license.PlatformVerificationStatus
	29, // 5: license.LicenseRequest.client_id:type_name -> license.ClientIdentification
	41, // 6: license.LicenseRequest.content_id:type_name -> license.LicenseRequest.ContentIdentification
	9,  // 7: license.LicenseRequest.type:type_name -> license.LicenseRequest.RequestType
	2,  // 8: license.LicenseRequest.protocol_version:type_name -> license.ProtocolVersion
	30, // 9: license.LicenseRequest.encrypted_client_id:type_name -> license.EncryptedClientIdentification
	46, // 10: license.MetricData.metric_data:type_name -> license.MetricData.TypeValue
	12, // 11: license.SignedMessage.type:type_name -> license.SignedMessage.MessageType
	26, // 12: license.SignedMessage.metric_data:type_name -> license.MetricData
	27, // 13: license.SignedMessage.service_version_info:type_name -> license.VersionInfo
	13, // 14: license.SignedMessage.session_key_type:type_name -> license.SignedMessage.SessionKeyType
	14, // 15: license.ClientIdentification.type:type_name -> license.ClientIdentification.TokenType
	47, // 16: license.ClientIdentification.client_info:type_name -> license.ClientIdentification.NameValue
	48, // 17: license.ClientIdentification.client_capabilities:type_name -> license.ClientIdentification.ClientCapabilities
	49, // 18: license.ClientIdentification.device_credentials:type_name -> license.ClientIdentification.ClientCredentials
	18, // 19: license.DrmCertificate.type:type_name -> license.DrmCertificate.Type
	19, // 20: license.DrmCertificate.service_types:type_name -> license.DrmCertificate.ServiceType
	20, // 21: license.DrmCertificate.algorithm:type_name -> license.DrmCertificate.Algorithm
	50, // 22: license.DrmCertificate.encryption_key:type_name -> license.DrmCertificate.EncryptionKey
	32, // 23: license.SignedDrmCertificate.signer:type_name -> license.SignedDrmCertificate
	3,  // 24: license.SignedDrmCertificate.hash_algorithm:type_name -> license.HashAlgorithmProto
	21, // 25: license.WidevinePsshData.type:type_name -> license.WidevinePsshData.Type
	51, // 26: license.WidevinePsshData.entitled_keys:type_name -> license.WidevinePsshData.EntitledKey
	22, // 27: license.WidevinePsshData.algorithm:type_name -> license.WidevinePsshData.Algorithm
	52, // 28: license.FileHashes.signatures:type_name -> license.FileHashes.Signature
	4,  // 29: license.License.KeyContainer.type:type_name -> license.License.KeyContainer.KeyType
	5,  // 30: license.License.KeyContainer.level:type_name -> license.License.KeyContainer.SecurityLevel
	38, // 31: license.License.KeyContainer.required_protection:type_name -> license.License.KeyContainer.OutputProtection
	38, // 32: license.License.KeyContainer.requested_protection:type_name -> license.License.KeyContainer.OutputProtection
	37, // 33: license.License.KeyContainer.key_control:type_name -> license.License.KeyContainer.KeyControl
	40, // 34: license.License.KeyContainer.operator_session_key_permissions:type_name -> license.License.KeyContainer.OperatorSessionKeyPermissions
	39, // 35: license.License.KeyContainer.video_resolution_constraints:type_name -> license.License.KeyContainer.VideoResolutionConstraint
	6,  // 36: license.License.KeyContainer.OutputProtection.hdcp:type_name -> license.License.KeyContainer.OutputProtection.HDCP
	7,  // 37: license.License.KeyContainer.OutputProtection.cgms_flags:type_name -> license.License.KeyContainer.OutputProtection.CGMS
	8,  // 38: license.License.KeyContainer.OutputProtection.hdcp_srm_rule:type_name -> license.License.KeyContainer.OutputProtection.HdcpSrmRule
	38, // 39: license.License.KeyContainer.VideoResolutionConstraint.required_protection:type_name -> license.License.KeyContainer.OutputProtection
	42, // 40: license.LicenseRequest.ContentIdentification.widevine_pssh_data:type_name -> license.LicenseRequest.ContentIdentification.WidevinePsshData
	43, // 41: license.LicenseRequest.ContentIdentification.webm_key_id:type_name -> license.LicenseRequest.ContentIdentification.WebmKeyId
	44, // 42: license.LicenseRequest.ContentIdentification.existing_license:type_name -> license.LicenseRequest.ContentIdentification.ExistingLicense
	45, // 43: license.LicenseRequest.ContentIdentification.init_data:type_name -> license.LicenseRequest.ContentIdentification.InitData
	0,  // 44: license.LicenseRequest.ContentIdentification.WidevinePsshData.license_type:type_name -> license.LicenseType
	0,  // 45: license.LicenseRequest.ContentIdentification.WebmKeyId.license_type:type_name -> license.LicenseType
	23, // 46: license.LicenseRequest.ContentIdentification.ExistingLicense.license_id:type_name -> license.LicenseIdentification
	10, // 47: license.LicenseRequest.ContentIdentification.InitData.init_data_type:type_name -> license.LicenseRequest.ContentIdentification.InitData.InitDataType
	0,  // 48: license.LicenseRequest.ContentIdentification.InitData.license_type:type_name -> license.LicenseType
	11, // 49: license.MetricData.TypeValue.type:type_name -> license.MetricData.MetricType
	15, // 50: license.ClientIdentification.ClientCapabilities.max_hdcp_version:type_name -> license.ClientIdentification.ClientCapabilities.HdcpVersion
	16, // 51: license.ClientIdentification.ClientCapabilities.supported_certificate_key_type:type_name -> license.ClientIdentification.ClientCapabilities.CertificateKeyType
	17, // 52: license.ClientIdentification.ClientCapabilities.analog_output_capabilities:type_name -> license.ClientIdentification.ClientCapabilities.AnalogOutputCapabilities
	14, // 53: license.ClientIdentification.ClientCredentials.type:type_name -> license.ClientIdentification.TokenType
	20, // 54: license.DrmCertificate.EncryptionKey.algorithm:type_name -> license.DrmCertificate.Algorithm
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_license_proto_init() }
func file_license_proto_init() {
	if File_license_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_license_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedClientIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrmCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedDrmCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidevinePsshData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileHashes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_KeyContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_KeyContainer_KeyControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_KeyContainer_OutputProtection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_KeyContainer_VideoResolutionConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License_KeyContainer_OperatorSessionKeyPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseRequest_ContentIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseRequest_ContentIdentification_WidevinePsshData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseRequest_ContentIdentification_WebmKeyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseRequest_ContentIdentification_ExistingLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseRequest_ContentIdentification_InitData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricData_TypeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientIdentification_NameValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientIdentification_ClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientIdentification_ClientCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrmCertificate_EncryptionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidevinePsshData_EntitledKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_license_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileHashes_Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_license_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*LicenseRequest_ContentIdentification_WidevinePsshData_)(nil),
		(*LicenseRequest_ContentIdentification_WebmKeyId_)(nil),
		(*LicenseRequest_ContentIdentification_ExistingLicense_)(nil),
		(*LicenseRequest_ContentIdentification_InitData_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_license_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_license_proto_goTypes,
		DependencyIndexes: file_license_proto_depIdxs,
		EnumInfos:         file_license_proto_enumTypes,
		MessageInfos:      file_license_proto_msgTypes,
	}.Build()
	File_license_proto = out.File
	file_license_proto_rawDesc = nil
	file_license_proto_goTypes = nil
	file_license_proto_depIdxs = nil
}
